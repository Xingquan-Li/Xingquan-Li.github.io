const t=JSON.parse('{"key":"v-ce9e8b0c","path":"/train/eda/algorithm-data/Part_7_algorithm/7_4_graph/7_4_10_Floyd%E7%AE%97%E6%B3%95%E6%B1%82%E5%A4%9A%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF.html","title":"7.4.10 Floyd求多源最短路","lang":"zh-CN","frontmatter":{"title":"7.4.10 Floyd求多源最短路","order":10},"headers":[{"level":3,"title":"结构定义","slug":"结构定义","link":"#结构定义","children":[]},{"level":3,"title":"弗洛伊德算法","slug":"弗洛伊德算法","link":"#弗洛伊德算法","children":[]},{"level":3,"title":"求A 到 D的最短路径","slug":"求a-到-d的最短路径","link":"#求a-到-d的最短路径","children":[]},{"level":3,"title":"完整代码","slug":"完整代码","link":"#完整代码","children":[]}],"git":{"createdTime":1721900327000,"updatedTime":1721900327000,"contributors":[{"name":"simintao","email":"simintao@126.com","commits":1}]},"readingTime":{"minutes":3.77,"words":1130},"filePathRelative":"train/eda/algorithm-data/Part_7_algorithm/7_4_graph/7_4_10_Floyd算法求多源最短路.md","localizedDate":"2024年7月25日","excerpt":"<h1> Floyd算法求多源最短路</h1>\\n<p>弗洛伊德算法作为求最短路径的经典算法，其算法实现相比迪杰斯特拉等算法是非常优雅的，可读性和理解都非常好。</p>\\n<p>基本思想：<br>\\n弗洛伊德算法定义了两个二维矩阵：</p>\\n<p>矩阵D记录顶点间的最小路径<br>\\n例如D [0] [3]= 10，说明顶点0 到 3 的最短路径为10；</p>\\n<p>矩阵P记录顶点间最小路径中的中转点 例如P[0] [3]= 1 说明，0 到 3的最短路径轨迹为：0 -&gt; 1 -&gt; 3。<br>\\n<strong>它通过3重循环，k为中转点，v为起点，w为终点，循环比较D[v] [w] 和 D[v] [k] + D[k] [w] 最小值，如果D[v] [k] + D[k] [w] 为更小值，则把D[v] [k] + D[k] [w] 覆盖保存在D[v] [w]中</strong>。</p>","copyright":{"author":"iEDA","license":"GPL-3.0"}}');export{t as data};
