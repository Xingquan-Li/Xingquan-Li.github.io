import{_ as t,a,b as r,c as s,d as n,e as o}from"./Lib_pin_part-9aa7ecd4.js";import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as d,o as c,c as h,d as i,e as l,a as _,f as b}from"./app-1ed3f6c2.js";const L={},m=b('<p>Lib文件是Liberty Timing文件的简称。编写.lib文件遵循Liberty语法。LIB文件是一个ASCII表示形式，包含了特定技术节点的标准单元库内部单元相关的时序和功耗参数。Lib文件基本上是一个时序模型文件，包含有关单元延迟、单元转换时间、单元的建立时间和保持时间要求。因此，Lib文件基本上包含了单元或宏单元的时序和电气特性。<strong>如果晶圆厂提供标准单元库，Lib文件由标准单元库供应商或晶圆厂生成并提供给ASIC设计师。</strong></p><p>为保证数据的精确性多采用<strong>非线性查表(look-uptable)或分段线性</strong>的方法，工具利用在库文件中查找最符合单元真实情况的数据进行延时与功耗计算。由于电路的延时和功耗是输入信号斜率与输出负载的函数，因此完整的表格有一维、二维和三维三种形式，分别表示了一元、二元以及三元三种函数关系。此外采用目前更先进的<strong>CCSM和ECSM模型</strong>建立的liberty库不仅提高了纳米工艺下时序的精确性，而且包含了对单元噪声描述。</p><p>liberty库文件通常比较大,但大致可以分为两部分。在第一部分中，定义了单元库的基本属性，第二部分是每个单元的具体信息，包括单元的延迟时间、泄露功耗，内部功耗等。为了更好地理解，可以查看以下Lib文件的快照。</p><h2 id="_1-lib文件的第一部分" tabindex="-1"><a class="header-anchor" href="#_1-lib文件的第一部分" aria-hidden="true">#</a> 1 LIB文件的第一部分</h2><p>Lib文件的通用部分包含以下内容：</p><ul><li>library 名称和技术名称</li><li>延迟模型、生成日期、版本</li><li>单位（时间、功率、电压、电流、电阻和电容）</li><li>建立时序库工艺、温度、电压，互连线模型</li></ul><div style="text-align:center;"><img src="'+t+'" alt="ASIC Flow" width="500"><h4>图1 LIB库名称版本等基本信息</h4></div><ul><li>定义延时模型和信号转换模型的参数</li></ul><div style="text-align:center;"><img src="'+a+'" alt="ASIC Flow" width="500"><h4>图2 延时模型和信号转换模型的参数</h4></div><ul><li>定义二维时序延时模板、依赖于负载约束的二维变量模板、二维功耗模板</li></ul><div style="text-align:center;"><img src="'+r+'" alt="ASIC Flow" width="500"><h4>图3 二维时序延时模板、依赖于负载约束的二维变量模板</h4></div><div style="text-align:center;"><img src="'+s+'" alt="ASIC Flow" width="500"><h4>图4 二维功耗模板</h4></div><h2 id="_2-lib文件的第二部分" tabindex="-1"><a class="header-anchor" href="#_2-lib文件的第二部分" aria-hidden="true">#</a> 2 LIB文件的第二部分</h2><p>基于工作条件，针对最大值、最小值和典型值情形，有三个不同的lib文件。在Lib文件的第二部分，它包含了每个单元特定的信息。包含单元特定信息的Lib文件部分如下所示。</p><div style="text-align:center;"><img src="'+n+'" alt="ASIC Flow" width="300"><h4>图2 LIB文件特定单元信息</h4></div><p>Lib文件中的特定于单元的信息主要包括：</p><ul><li>单元名称</li><li>PG引脚名称</li><li>单元面积</li><li>根据输入引脚逻辑状态的漏电功率</li><li>引脚详情 <ul><li><p>引脚名称</p></li><li><p>引脚方向</p></li><li><p>内部功率</p></li><li><p>电容</p></li><li><p>上升电容</p></li><li><p>下降电容</p></li><li><p>驱动负载</p></li></ul></li></ul><p>下面给出了Lib文件中针对引脚部分的一个快照。</p><div style="text-align:center;"><img src="'+o+'" alt="ASIC Flow" width="300"><h4>图3 LIB文件引脚部分信息</h4></div><p>单元的时序和功耗参数是通过在各种操作条件下模拟单元获得的，数据在Lib文件中表示。生成Lib文件的主要有两种技术：</p><ul><li>CCS（复合电流源）</li><li>NLDM（非线性延迟模型）</li></ul><p>在CCS技术中使用电流源，而在NLDM技术中使用电压源来模型化并推导Lib参数。基于用于表征单元的CCS和NLDM技术，我们将相应的Lib文件称为CCS Lib文件和NLDM Lib文件。由于CCS技术与NLDM技术相比具有更多的控制参数，因此CCS Lib文件更加准确。NLDM Lib文件具有较少的运行时间，即比CCS Lib运行更快，且NLDM文件的大小也小于CCS Lib文件。</p><h2 id="引用" tabindex="-1"><a class="header-anchor" href="#引用" aria-hidden="true">#</a> 引用</h2>',23),C={href:"https://teamvlsi.com/2020/05/lib-and-lef-file-in-asic-design.html",target:"_blank",rel:"noopener noreferrer"},u=i("p",null,"[2]《数字集成电路物理设计》P248-255",-1);function g(f,I){const e=d("ExternalLinkIcon");return c(),h("div",null,[m,i("p",null,[l("[1] 原文链接："),i("a",C,[l("https://teamvlsi.com/2020/05/lib-and-lef-file-in-asic-design.html"),_(e)])]),u])}const w=p(L,[["render",g],["__file","2_5_LIB.html.vue"]]);export{w as default};
