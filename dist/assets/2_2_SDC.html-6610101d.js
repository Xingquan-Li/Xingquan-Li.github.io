import{_ as d,a as n,b as r,c as s,d as l,e as a,f as i}from"./sdc_uncertainty-5d693772.js";import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as _,c as g,d as t,e as p,a as u,f as m}from"./app-1ed3f6c2.js";const v={},h=m('<p>快问快答迅速了解一下SDC的基本内容吧~</p><h2 id="_1-sdc文件是什么" tabindex="-1"><a class="header-anchor" href="#_1-sdc文件是什么" aria-hidden="true">#</a> 1 SDC文件是什么？</h2><ul><li><p>SDC 全称 Synopsys Design Constraint，基于<strong>TCL格式</strong>，由Synopsys公司开发定义的。</p></li><li><p>SDC是一种<strong>通用的设计约束格式</strong>，几乎所有综合、PnR和其他工具都支持。</p></li><li><p>此文件扩展名为 <strong>.sdc</strong>。</p></li><li><p>逻辑综合时期撰写约束，综合到布线都将用到SDC。</p></li></ul><h2 id="_2-sdc文件的作用是什么" tabindex="-1"><a class="header-anchor" href="#_2-sdc文件的作用是什么" aria-hidden="true">#</a> 2 SDC文件的作用是什么？</h2><p>SDC设计约束文件用来约束电路的<strong>时序、功耗、面积</strong>等，从而使芯片满足设计要求的规范。</p><h2 id="_3-sdc文件的产生" tabindex="-1"><a class="header-anchor" href="#_3-sdc文件的产生" aria-hidden="true">#</a> 3 SDC文件的产生？</h2><p>SDC文件可以由综合工具<strong>Logic Synthesis tool</strong> 生成，附加一些约束后生成，并使用于<strong>PnR</strong>（Place and Route），即布局和布线环节。</p><div style="text-align:center;"><img src="'+d+`" alt="ASIC Flow" width="600"><h4>图1 SDC文件产生流程</h4></div><h2 id="_4-sdc文件的内容及其命令" tabindex="-1"><a class="header-anchor" href="#_4-sdc文件的内容及其命令" aria-hidden="true">#</a> 4 SDC文件的内容及其命令</h2><p>SDC文件包含以下4部分：① 版本；② 基本单位；③ 设计约束；④ 注释部分。其中设计约束是SDC的主要内容，而 ①、②、④ 部分不是必须的。</p><h3 id="_1-sdc版本" tabindex="-1"><a class="header-anchor" href="#_1-sdc版本" aria-hidden="true">#</a> (1) SDC版本</h3><p>此语句指定SDC文件的版本。它可以是2.1、2.0、1.9或更早的版本。版本2.1于2017年12月引入。</p><p>示例：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>set sdc_version 2.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-基本单位" tabindex="-1"><a class="header-anchor" href="#_2-基本单位" aria-hidden="true">#</a> (2) 基本单位</h3><p>可以使用set_unit命令指定各种量的单位，如时间、电阻、电容、电压、电流和功率。也可以使用单个set_unit命令设置多个单位。</p><p>示例：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>set_units -time ns -resistance Kohm -capacitance pF -voltage V -current mA
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-注释部分" tabindex="-1"><a class="header-anchor" href="#_3-注释部分" aria-hidden="true">#</a> (3) 注释部分</h3><p>一个SDC文件会在文件开头包含SDC版本号，其次是设计约束，注释（注释以字符＃开始，并在行尾处结束）在SDC文件中可以散布在设计约束中。设计约束中较长的命令行可以使用反斜杠（\\）字符分成多行。</p><h3 id="_4-设计约束" tabindex="-1"><a class="header-anchor" href="#_4-设计约束" aria-hidden="true">#</a> (4) 设计约束</h3><p>SDC与设计约束相关的命令可分为9类，如下：<br><img src="`+n+`" alt="alt text"></p><hr><h4 id="工作环境相关命令" tabindex="-1"><a class="header-anchor" href="#工作环境相关命令" aria-hidden="true">#</a> <strong>- 工作环境相关命令</strong></h4><p>工作环境命令 <strong>set operating_conditions</strong> 用于设置电路最快和最慢情况下所对应的库文件和工作环境。</p><p>示例：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 定义工作条件
set_operating_conditions -process &quot;typical&quot; -corner &quot;slow&quot; {
    voltage 1.0
    temperature 25
}

set_operating_conditions -process &quot;typical&quot; -corner &quot;fast&quot; {
    voltage 1.1
    temperature 85
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，我们定义了两种不同的工作条件：一种是在典型工艺、慢角的情况下，电压为1.0V，温度为25摄氏度；另一种是在典型工艺、快角的情况下，电压为1.1V，温度为85摄氏度。</p><hr><h4 id="设计规则约束相关命令" tabindex="-1"><a class="header-anchor" href="#设计规则约束相关命令" aria-hidden="true">#</a> <strong>- 设计规则约束相关命令</strong></h4><p>设计规则约束的所有命令如表：</p><figure><img src="`+r+`" alt="alt text" tabindex="0"><figcaption>alt text</figcaption></figure><table><thead><tr><th style="text-align:center;">序号</th><th style="text-align:center;">命令名称</th><th style="text-align:center;">描述</th><th style="text-align:center;">示例</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;"><strong>create_clock</strong></td><td style="text-align:center;">定义时钟信号及其特性。</td><td style="text-align:center;"><code>create_clock -period 10 [get_ports clk]</code></td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;"><strong>create_generated_clock</strong></td><td style="text-align:center;">创建由时钟衍生出的时钟。</td><td style="text-align:center;"><code>create_generated_clock -name Gated_Clock -source Main_Clock -divide_by 2</code></td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;"><strong>set_clock_groups</strong></td><td style="text-align:center;">定义时钟组。</td><td style="text-align:center;"><code>set_clock_groups -logically_exclusive {Group1 Group2}</code></td></tr><tr><td style="text-align:center;">4</td><td style="text-align:center;"><strong>derived_clock</strong></td><td style="text-align:center;">创建一个派生时钟。</td><td style="text-align:center;"><code>derived_clock -source Parent_Clock -divide_by 4</code></td></tr><tr><td style="text-align:center;">5</td><td style="text-align:center;"><strong>set_clock_latency</strong></td><td style="text-align:center;">设置时钟路径的延迟。</td><td style="text-align:center;"><code>set_clock_latency -source Main_Clock -max 5 [get_pins DFF*]</code></td></tr><tr><td style="text-align:center;">6</td><td style="text-align:center;"><strong>set_input_delay</strong></td><td style="text-align:center;">设置输入延迟。</td><td style="text-align:center;"><code>set_input_delay 2 -clock [get_clocks Main_Clock] [get_ports data_in]</code></td></tr><tr><td style="text-align:center;">7</td><td style="text-align:center;"><strong>set_output_delay</strong></td><td style="text-align:center;">设置输出延迟。</td><td style="text-align:center;"><code>set_output_delay 1 -clock [get_clocks Main_Clock] [get_ports data_out]</code></td></tr><tr><td style="text-align:center;">8</td><td style="text-align:center;"><strong>set_max_delay</strong></td><td style="text-align:center;">设置路径的最大延迟。</td><td style="text-align:center;"><code>set_max_delay 6 -from [get_pins U1/Q] -to [get_pins U2/D]</code></td></tr><tr><td style="text-align:center;">9</td><td style="text-align:center;"><strong>set_min_delay</strong></td><td style="text-align:center;">设置路径的最小延迟。</td><td style="text-align:center;"><code>set_min_delay 2 -from [get_pins U1/Q] -to [get_pins U2/D]</code></td></tr><tr><td style="text-align:center;">10</td><td style="text-align:center;"><strong>set_false_path</strong></td><td style="text-align:center;">指定不需要进行时序验证的路径。</td><td style="text-align:center;"><code>set_false_path -from [get_pins U1/Q] -to [get_pins U2/D]</code></td></tr><tr><td style="text-align:center;">11</td><td style="text-align:center;"><strong>set_multicycle_path</strong></td><td style="text-align:center;">设置多周期路径。</td><td style="text-align:center;"><code>set_multicycle_path -setup 2 -hold 1 -from [get_pins U1/Q] -to [get_pins U2/D]</code></td></tr><tr><td style="text-align:center;">12</td><td style="text-align:center;"><strong>set_disable_timing</strong></td><td style="text-align:center;">禁用特定路径的时序分析。</td><td style="text-align:center;"><code>set_disable_timing -from [get_pins U1/Q] -to [get_pins U2/D]</code></td></tr><tr><td style="text-align:center;">13</td><td style="text-align:center;"><strong>set_false_hold</strong></td><td style="text-align:center;">设置保持时间约束。</td><td style="text-align:center;"><code>set_false_hold -from [get_pins U1/Q] -to [get_pins U2/D]</code></td></tr><tr><td style="text-align:center;">14</td><td style="text-align:center;"><strong>set_max_fanout</strong></td><td style="text-align:center;">设置路径上的最大负载数。</td><td style="text-align:center;"><code>set_max_fanout 10 [get_nets clk_net]</code></td></tr><tr><td style="text-align:center;">15</td><td style="text-align:center;"><strong>set_max_transition</strong></td><td style="text-align:center;">设置信号过渡时间。</td><td style="text-align:center;"><code>set_max_transition 0.2 [get_pins U1/Q]</code></td></tr><tr><td style="text-align:center;">16</td><td style="text-align:center;"><strong>set_case_analysis</strong></td><td style="text-align:center;">定义逻辑混合时的条件和优先级。</td><td style="text-align:center;"><code>set_case_analysis -priority high -case 1 {A B} -case 2 {C D}</code></td></tr><tr><td style="text-align:center;">17</td><td style="text-align:center;"><strong>set_disable_port_transition</strong></td><td style="text-align:center;">禁用端口过渡时间约束。</td><td style="text-align:center;"><code>set_disable_port_transition -port data_in</code></td></tr><tr><td style="text-align:center;">18</td><td style="text-align:center;"><strong>set_dont_touch</strong></td><td style="text-align:center;">指定不进行任何操作的单元。</td><td style="text-align:center;"><code>set_dont_touch [get_cells -hierarchical -filter {is_ff == 1}]</code></td></tr><tr><td style="text-align:center;">19</td><td style="text-align:center;"><strong>set_false_path_group</strong></td><td style="text-align:center;">指定不需要进行时序验证的路径组。</td><td style="text-align:center;"><code>set_false_path_group -group Group1 -from [get_cells -hierarchical -filter {is_latch == 1}]</code></td></tr><tr><td style="text-align:center;">20</td><td style="text-align:center;"><strong>set_max_area</strong></td><td style="text-align:center;">设置最大面积约束。</td><td style="text-align:center;"><code>set_max_area 1000 [get_cells -hierarchical -filter {is_comb == 1}]</code></td></tr></tbody></table><hr><h4 id="线负载模型相关命令" tabindex="-1"><a class="header-anchor" href="#线负载模型相关命令" aria-hidden="true">#</a> <strong>- 线负载模型相关命令</strong></h4><p>在SDC（Synopsys Design Constraints）中，<strong>set_wire_load_min_block_size、set_wire_load_mode、set_wire_load_model和set_wire_load_selection_group</strong>是用于描述线负载模型的关键命令。下面我们将解释它们的含义并提供一些示例：</p><table><thead><tr><th>命令名称</th><th>含义</th><th>示例</th></tr></thead><tbody><tr><td>set_wire_load_min_block_size</td><td>该命令用于设置最小的线负载块大小。在实际设计中，线负载会被分成不同的块，这个命令可以指定最小的块大小。</td><td><code>set_wire_load_min_block_size 10</code><br> 这个示例命令将设置线负载的最小块大小为 10。</td></tr><tr><td>set_wire_load_mode</td><td>该命令用于设置线负载的模式，例如设置线负载是全局的还是局部的。</td><td><code>set_wire_load_mode local</code><br> 这个示例命令将设置线负载模式为局部（local）。</td></tr><tr><td>set_wire_load_model</td><td>该命令用于设置线负载的模型，即描述线负载的特性和行为的模型。</td><td><code>set_wire_load_model rc_tree</code><br> 这个示例命令将设置线负载的模型为 RC 树模型。</td></tr><tr><td>set_wire_load_selection_group</td><td>该命令用于设置特定的线负载选择组，用于对不同的线负载进行分组和管理。</td><td><code>set_wire_load_selection_group Group1 -members {net1 net2}</code><br> 这个示例命令将创建一个名为 Group1 的线负载选择组，并将 net1 和 net2 加入到这个组中。</td></tr></tbody></table><hr><h4 id="系统接口约束相关命令" tabindex="-1"><a class="header-anchor" href="#系统接口约束相关命令" aria-hidden="true">#</a> <strong>- 系统接口约束相关命令</strong></h4><p>系统接口相关命令主要有六条：</p><table><thead><tr><th>命令</th><th>含义</th><th>示例</th></tr></thead><tbody><tr><td><code>set_drive</code></td><td>设置信号驱动器的驱动能力，即输出信号的电流能力。</td><td><code>set_drive(portA, strong)</code></td></tr><tr><td><code>set_driving_cell</code></td><td>指定特定端口的驱动单元类型，确保信号在逻辑路径上传输时稳定和准确。</td><td><code>set_driving_cell(portB, inverter)</code></td></tr><tr><td><code>set_fanout_load</code></td><td>设置端口的负载电容，表示端口输出信号连接的所有负载元件的总电容。</td><td><code>set_fanout_load(portC, 10pF)</code></td></tr><tr><td><code>set_input_transition</code></td><td>设置端口的输入过渡时间，即输入信号从低电平到高电平或从高电平到低电平的时间。</td><td><code>set_input_transition(portD, 0.1ns)</code></td></tr><tr><td><code>set_load</code></td><td>设置端口的负载值，表示端口连接的负载电容大小。</td><td><code>set_load(portE, 5pF)</code></td></tr><tr><td><code>set_port_fanout_number</code></td><td>设置端口的扇出数量，表示一个端口连接的逻辑门数量。</td><td><code>set_port_fanout_number(portF, 4)</code></td></tr></tbody></table><p>最重要的是设置输入端口的驱动能力和设置输出端电容值，下面进行详细说明：</p><p><strong>a 设置驱动单元</strong></p><p>指定由技术库中的单元驱动的输入或双向端口的驱动特性。这些命令将库引脚与输入端口关联，以便可以准确地建模延迟计算。</p><p>语法：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>set_driving_cell [-lib_cell lib_cell_name] [-library lib_name] [-rise] [-fall] [-min] [-max] [-pin pin_name] [-from_pin from_pin_name] [-dont_scale] [-no_design_rule] [-input_transition_rise rtrans] [-input_transition_fall ftrans] [-multiply_by_facrtor] [-clock clock_name] [-clock_fall] port_list
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>参数</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><strong>set_driving_cell</strong></td><td>设置驱动负载，即指定特定端口的驱动能力和负载电容。</td><td></td></tr><tr><td><strong>-lib_cell lib_cell_name</strong></td><td>指定库单元名称。</td><td><code>-lib_cell INV_X2</code></td></tr><tr><td><strong>-library lib_name</strong></td><td>指定库名称。</td><td><code>-library my_lib</code></td></tr><tr><td><strong>-rise</strong></td><td>针对上升边沿设置驱动能力。</td><td><code>-rise</code></td></tr><tr><td><strong>-fall</strong></td><td>针对下降边沿设置驱动能力。</td><td><code>-fall</code></td></tr><tr><td><strong>-min</strong></td><td>指定最小值。</td><td><code>-min 0.1</code></td></tr><tr><td><strong>-max</strong></td><td>指定最大值。</td><td><code>-max 0.5</code></td></tr><tr><td><strong>-pin pin_name</strong></td><td>指定端口名称。</td><td><code>-pin data_in</code></td></tr><tr><td><strong>-from_pin from_pin_name</strong></td><td>指定起始端口名称。</td><td><code>-from_pin source_out</code></td></tr><tr><td><strong>-dont_scale</strong></td><td>不进行缩放。</td><td><code>-dont_scale</code></td></tr><tr><td><strong>-no_design_rule</strong></td><td>忽略设计规则。</td><td><code>-no_design_rule</code></td></tr><tr><td><strong>-input_transition_rise rtrans</strong></td><td>输入上升过渡时间。</td><td><code>-input_transition_rise 0.2</code></td></tr><tr><td><strong>-input_transition_fall ftrans</strong></td><td>输入下降过渡时间。</td><td><code>-input_transition_fall 0.3</code></td></tr><tr><td><strong>-multiply_by_facrtor</strong></td><td>乘以因子。</td><td><code>-multiply_by_facrtor 2</code></td></tr><tr><td><strong>-clock clock_name</strong></td><td>指定时钟名称。</td><td><code>-clock clk_2x</code></td></tr><tr><td><strong>-clock_fall</strong></td><td>针对时钟下降边沿设置。</td><td><code>-clock_fall</code></td></tr><tr><td><strong>port_list</strong></td><td>端口列表。</td><td><code>data_in data_out</code></td></tr></tbody></table><p>示例：</p><figure><img src="`+s+`" alt="alt text" tabindex="0"><figcaption>alt text</figcaption></figure><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 设置单元库为IV的驱动单元，并将其应用于输入端口I1
set_driving_cell -lib_cell IV {I1}

# 设置单元库为AND2的驱动单元，并将其应用于从端口B到端口Z的逻辑路径，并将其应用于输入端口I2
set_driving_cell -lib_cell AND2 -pin Z -from_pin B {I2} 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>b 设置负载</strong></p><p>该命令设置当前设计中指定端口和网络上的负载属性。负载值的单位将是在文件中定义的电容单位。</p><p>语法：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>set_load value objects [-subtract_pin_load] [-min] [-max] [[-pin_load] [-wire_load]]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 将引脚负载值设置为0.001，作用对象是名为port[10]的端口
set_load -pin_load 0.001 [get_ports {port[10]}]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="时序约束相关命令" tabindex="-1"><a class="header-anchor" href="#时序约束相关命令" aria-hidden="true">#</a> <strong>- 时序约束相关命令</strong></h4><p>在这部分中，基本上我们设置时钟定义、时钟组、时钟延迟、时钟不确定性、时钟过渡、输入延迟、输出延迟、时序折减等。</p><p><strong>创建时钟</strong></p><p>语法：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>create_clock [-name clock_name] [clock_sources] [-period value] [-waveform edge_list] [-add] [-comment]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>create_clock命令在当前设计中创建一个时钟对象。此命令将指定的source_objects定义为时钟源。</p><p>示例：<br><img src="`+l+`" alt="alt text"></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>create_clock &quot;u13/z&quot; -name &quot;CLK&quot; -period 30 -waveform {12.0 27.0}\`\\

create_clock -name &quot;PH12&quot; -period 10 -waveform {0.0 5.0}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>创建生成时钟</strong></p><p>语法：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>create_generated_clock [-name clock_name] [-add] source_objects -source master_pin [-master_clock clock] [-divide_by divide_factor | -multiply_by multiply_factor ] [-duty_cycle percent] [-invert] [-preinvert] [-edges edge_list] [-edge_shift edge_shift_list] [-combinational]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>create_generated_clock命令创建一个生成的时钟对象。可以指定引脚或端口作为生成的时钟对象。生成的时钟跟随主时钟，因此每当主时钟变化时，生成的时钟会自动变化。可以将生成的时钟创建为频率分频时钟、频率倍增时钟、边缘分频时钟或反相时钟。</p><p>示例：<br><img src="`+a+`" alt="alt text"></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>create_generated_clock -multiplied_by 3 -source CLK [get_pins div3/Q]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以上示例将生成一个时钟，该时钟源自名为CLK的原始时钟。生成的时钟频率将是原始时钟的3倍，时间周期将是原始时钟的三分之一（15ns –&gt; 5ns）。</p><p><strong>组路径</strong></p><p>语法：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>group_path [-weight weight_value] [-critical_range range_value] -default | -name group_name [-from from_list | -rise_from rise_from_list | -fall_from fall_from_list] [-through trough_list | -rise_through rise_through_list -fall_through fall_through_list] [-to to_list | -rise_to rise_to_list | -fall_to fall_to_list] [-comment comment_string] [-priority priority_level]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>组是一组路径或终点，用于成本函数计算。该组使我们能够指定一组路径进行优化，即使在其他组中可能存在较大的违规。当指定了终点时，所有通向这些终点的路径都被分组。</p><p>create_clock命令会自动为新时钟创建一个权重为1.0且与时钟名称相同的组。</p><p>示例：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>group_path -name “group1” -weight 2.0 -to {CLK1A CLK1B}

group_path -name GROUP1 -from [get_ports ABC/in3] -to [get-ports FF1/D]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>时钟不确定性</strong></p><p>语法：</p><p><code>set_clock_uncertainity [object_list | -from from_clock | -rise_from rise_from_clock | -fall_from fall_from_clock -to to_clock | -rise_to rise_to_clock | -fall_to fall_to_clock] [rise] [-fall] [-setup] [-hold] uncertainty </code></p><p>在定义时钟后，为了处理时钟网络中的差异，添加了时钟不确定性。时钟不确定性为系统增加了一些误差裕量，以考虑由时钟网络和时钟源本身的非理想性引起的时钟网络差异。上述命令可以指定时钟之间的不确定性或简单不确定性。它将不确定性设置为预期的最差时延，以适用于端点或时钟域之间。</p><p>示例：</p><figure><img src="`+i+`" alt="alt text" tabindex="0"><figcaption>alt text</figcaption></figure><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>set_clock_uncertainty -setup 0.5 [get_clocks clk1]set_clock_uncertainty -hold 0.2 [get_clocks clk1]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>时钟不确定性也可以为时钟的上升和下降时间添加，如下所示。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>set_clock_uncertainty -max_rise 0.12 [get_clocks clk1]

set_clock_uncertainty -max_fall 0.12 [get_clocks clk1]

set_clock_uncertainty -min_rise 0.12 [get_clocks clk1]

set_clock_uncertainty -min_fall 0.12 [get_clocks clk1]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>时钟延迟</strong></p><p>语法:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>set_clock_latency [-rise] [-fall] [-min] [-max] [-source] [-early] [-late] [-dynamic jitter] [-clock clock_list] delay object_list
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>时钟延迟指的是时钟信号从时钟源引脚到达顺序元素的时钟引脚的延迟量。有两种类型的时钟延迟，一种是网络延迟（默认），另一种是源延迟（使用-source选项）。</p><p>时钟网络延迟是时钟信号从时钟定义点传播到寄存器的时钟引脚所需的时间。而源延迟是时钟信号从实际理想波形起点传播到设计中的时钟定义点所需的时间。源延迟也称为插入延迟。</p><p>示例：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>set_clock_latency 2.35 [get_pins ABC/XYZ/CP]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>输入延迟</strong></p><p>语法：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>set_input_delay delay_value [-reference_pin pin_port_name] [-clock clock_name] [-level_sensitive] [-network_latency_included] [-source-latency_included] [-rise] [-fall] [-min] [-max] [-add_delay] port_pin_list
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输入延迟定义了输入端口相对于时钟边沿的时间要求。如果未指定，假定输入端口具有零输入延迟。要指定的延迟值是从起点到相对于时钟边沿的对象上设置set_input_delay的对象之间的延迟。</p><p>示例：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>set_input_delay -max 1.35 -clock clk1 {ain bin}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>输出延迟</strong></p><p>语法：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>set_output_delay delay_value [-reference_pin pin_port_name] [-clock clock_name] [ -clock_fall] [-level_sensitive] [-network_latency_included] [-source-latency_included] [-rise] [-fall] [-min] [-max] [-add_delay] [-group_path group_name] port_pin_list
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>set_output_delay命令设置输出端口相对于时钟边沿的输出延迟要求。如果未指定，假定输出端口具有零输出延迟。</p><p>示例：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>set_output_delay 1.7 -clock [get_clocks CLK1] [all_outputs]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上述命令将设置所有输出端口相对于CLK1的正边沿（默认边沿）的1.7单位输出延迟。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>set_output_delay -max 1.4 -clock {CLK} [get_ports {Y}]

set_output_delay -min 1.0 -clock {CLK} [get_ports {Y}]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述命令中，-max值指的是最长路径，-min值指的是最短路径。如果没有指定-max或-min值，假定最大和最小输出延迟是相等的。</p><hr><h4 id="时序异常" tabindex="-1"><a class="header-anchor" href="#时序异常" aria-hidden="true">#</a> <strong>- 时序异常</strong></h4><p>在这部分，定义了一些重要的约束，如虚假路径、多周期路径、最大延迟和最小延迟。</p><p><strong>a 多周期路径</strong></p><p>语法：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>set_multicycle_path path_multiplier [-rise | -fall] [-setup | -hold] [-start | -end] [-from from_list | -rise_from rise_from_list | -fall_from fall_from_list] [-through through_list] [-rise_through rise_through_list] [-fall_through fall-through_list] [-to to_list | -rise_to rise_to_list | -fall_to fall_to_list] [-reset_path]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>多周期路径是默认单周期时序要求路径的一个例外。在多周期路径中，信号需要超过一个时钟周期才能从起点传播到路径的终点。此命令指定数据路径必须具有的周期数，用于建立或保持检查。以下命令将设置从源点A到终点B的两周期路径约束。</p><p>示例：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>set_multicycle_path 2 -from A -to B

set_multicycle_path 3 -from C
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以在源点和终点之间添加一个-through点，也可以通过只提及源点或终点来设置所有路径的多周期路径。</p><p><strong>b 伪路径</strong></p><p>语法：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>set_false_path [-rise] [-fall] [-setup] [-hold] [-from from_list | -rise_from rise_from_list | -fall_from fall_from_list] [-through through_list] [-rise_through rise_through_list] [-fall_through fall-through_list] [-to to_list | -rise_to rise_to_list | -fall_to fall_to_list] [-reset_path]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>伪路径是不能传播信号的路径。例如，一个从不被任何输入组合激活的路径是一个虚假路径。应该为时序分析禁用虚假路径。SDC命令set_false_path用于定义虚假路径。虚假路径将被排除在时序分析之外。</p><p>示例：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>set_false_path -from U1/G -to U1/D

set_false_path -from {ff12} -to {ff34}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-引用" tabindex="-1"><a class="header-anchor" href="#_5-引用" aria-hidden="true">#</a> 5 引用</h2>`,127),x=t("li",null,"《数字集成电路物理设计》P239-241",-1),b={href:"https://teamvlsi.com/2020/05/sdc-synopsys-design-constraint-file-in.html",target:"_blank",rel:"noopener noreferrer"};function y(f,k){const e=c("ExternalLinkIcon");return _(),g("div",null,[h,t("ol",null,[x,t("li",null,[t("a",b,[p("https://teamvlsi.com/2020/05/sdc-synopsys-design-constraint-file-in.html"),u(e)])])])])}const w=o(v,[["render",y],["__file","2_2_SDC.html.vue"]]);export{w as default};
