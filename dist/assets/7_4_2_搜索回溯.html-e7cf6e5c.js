const e=JSON.parse('{"key":"v-5c7fc6da","path":"/train/eda/algorithm-data/Part_7_algorithm/7_4_graph/7_4_2_%E6%90%9C%E7%B4%A2%E5%9B%9E%E6%BA%AF.html","title":"7.4.2 搜索回溯","lang":"zh-CN","frontmatter":{"title":"7.4.2 搜索回溯","order":2},"headers":[{"level":2,"title":"基本认识","slug":"基本认识","link":"#基本认识","children":[]},{"level":2,"title":"基本思想与原理","slug":"基本思想与原理","link":"#基本思想与原理","children":[]},{"level":2,"title":"适用的问题","slug":"适用的问题","link":"#适用的问题","children":[]},{"level":2,"title":"求解的步骤与模板","slug":"求解的步骤与模板","link":"#求解的步骤与模板","children":[]},{"level":2,"title":"引例部分","slug":"引例部分","link":"#引例部分","children":[]},{"level":2,"title":"实战部分","slug":"实战部分","link":"#实战部分","children":[]}],"git":{"createdTime":1721900327000,"updatedTime":1721900327000,"contributors":[{"name":"simintao","email":"simintao@126.com","commits":1}]},"readingTime":{"minutes":4.27,"words":1282},"filePathRelative":"train/eda/algorithm-data/Part_7_algorithm/7_4_graph/7_4_2_搜索回溯.md","localizedDate":"2024年7月25日","excerpt":"<h2> 基本认识</h2>\\n<p>回溯算法（DFS 深度优先算法）实际上一个类似枚举的搜索尝试过程，主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就“回溯”返回，尝试别的路径。回溯法是一种选优搜索法，按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，这种走不通就退回再走的技术为回溯法，而满足回溯条件的某个状态的点称为“回溯点”。</p>\\n<h2> 基本思想与原理</h2>\\n<p>回溯法（DFS 深度优先算法）简单来说就是按照深度优先的顺序，穷举所有可能性的算法，但是回溯算法比暴力穷举法更高明的地方就是回溯算法可以随时判断当前状态是否符合问题的条件。一旦不符合条件，那么就退回到上一个状态，省去了继续往下探索的时间。<br>\\n<em>换句话说，回溯法可以理解为通过选择不同的岔路口寻找目的地，一个岔路口一个岔路口的去尝试找到目的地。如果走错了路，继续返回来找到岔路口的另一条路，直到找到目的地。省去了在错路上走下去的时间。</em></p>","copyright":{"author":"iEDA","license":"GPL-3.0"}}');export{e as data};
