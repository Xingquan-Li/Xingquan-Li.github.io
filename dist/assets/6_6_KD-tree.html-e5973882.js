import{_ as s,a,b as p,c as t,d as o,e}from"./KDTree_6-ed710a61.js";import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{o as l,c as i,e as u,f as n}from"./app-1ed3f6c2.js";const r={},k=n('<h2 id="一、关于多维查询" tabindex="-1"><a class="header-anchor" href="#一、关于多维查询" aria-hidden="true">#</a> 一、关于多维查询</h2><h5 id="_1-一维查询" tabindex="-1"><a class="header-anchor" href="#_1-一维查询" aria-hidden="true">#</a> 1. 一维查询</h5><ul><li><p>假设表格T储存了学生的考试成绩，如何查询分数49分以上的学生?</p></li><li><p>如果使用遍历的方式，时间复杂度为了<img src="https://math.jianshu.com/math?formula=O(n)" alt="O(n)">。</p></li><li><p>为了提高效率，可以使用平衡二叉树的方式。</p></li></ul><div style="text-align:center;"><img src="'+s+'" alt="ASIC Flow" width="200"><h4>图1 平衡二叉树</h4></div><h5 id="_2-二维查询" tabindex="-1"><a class="header-anchor" href="#_2-二维查询" aria-hidden="true">#</a> 2. 二维查询</h5><ul><li>假设表格T储存了学生的语文和数学考试成绩，如果查询语文成绩介于30～93，数学成绩介于30～90的学生？</li></ul><div style="text-align:center;"><img src="'+a+'" alt="ASIC Flow" width="200"><h4>图2 表格</h4></div><ul><li><p>如果继续使用平衡二叉树的方式，则需要首先分别获得语文成绩和数学成绩的集合，再算出两个集合的交际，时间复杂度为<img src="https://math.jianshu.com/math?formula=O(m*n)" alt="O(m*n)">。</p></li><li><p>为了提高效率，可以按照以下方法，将时间复杂度保持在<img src="https://math.jianshu.com/math?formula=O\\log(n)" alt="Oog(n)">水平：</p></li></ul><blockquote><p><strong>1)</strong> 根据语文成绩将所有人的成绩分成两半，其中一半的语文成绩&lt;=c1，另一半的语文成绩&gt;c1，分别得到集合S1,S2;<br><strong>2)</strong> 针对S1，根据数学成绩分为两半，其中一半的数学成绩&lt;=m1,另一半的数学成绩&gt;m1，分别得到S3,S4;<br><strong>3)</strong> 针对S2，根据数学成绩分为两半，其中一半的数学成绩&lt;=m2,另一半的数学成绩&gt;m2，分别得到S5,S6；<br><strong>4)</strong> 根据语文成绩分别对S3,S4，S5,S6继续执行类似划分得到更小的集合，然后再在更小的集合上根据数学成绩继续</p></blockquote><div style="text-align:center;"><img src="'+p+'" alt="ASIC Flow" width="200"><h4>图3 划分</h4></div><ul><li>通过以上操作，就生成了一颗kd树:</li></ul><div style="text-align:center;"><img src="'+t+'" alt="ASIC Flow" width="200"><h4>图4 生成KD树</h4></div><h2 id="二、关于kd树" tabindex="-1"><a class="header-anchor" href="#二、关于kd树" aria-hidden="true">#</a> 二、关于KD树</h2><h5 id="_1-关于kd树" tabindex="-1"><a class="header-anchor" href="#_1-关于kd树" aria-hidden="true">#</a> 1. 关于KD树</h5><ul><li><p>KD树(K-dimensional tree，k维树)，是一种高位索引树形数据结构。</p></li><li><p>KD树的每个节点都是k维点的二叉树。</p></li><li><p>所有非叶节点都可以看成用一个超平面把空间分区成两个 半空间。</p></li><li><p>节点左子树代表在超平面左边的点，右子树代表右边的点。</p></li></ul><div style="text-align:center;"><img src="'+o+'" alt="ASIC Flow" width="200"><h4>图5 KD树</h4></div><h5 id="_2-超平面的选择方法" tabindex="-1"><a class="header-anchor" href="#_2-超平面的选择方法" aria-hidden="true">#</a> 2. 超平面的选择方法</h5><ul><li><p>每个节点都与k维中垂直于超平面的那一维有关。</p></li><li><p>因此，如果选择按照x轴划分，所有x值小于指定值的结点都会出现在左子树，大于的都会出现在右子树。</p></li><li><p>这样，超平面可以用x值来圈定，其法线为x轴的单位向量。</p></li></ul><div style="text-align:center;"><img src="'+e+'" alt="ASIC Flow" width="200"><h4>图6 超平面</h4></div>',19),d=n(`<h5 id="_1-构造" tabindex="-1"><a class="header-anchor" href="#_1-构造" aria-hidden="true">#</a> 1. 构造</h5><ul><li>循环依序取数据点的各维度来作为切分维度;</li></ul><table><thead><tr><th style="text-align:left;">维度选择</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">切分维度选择优化</td><td style="text-align:left;">- 构建开始前，对比数据点在各维度的分布情况，数据点在某一维度坐标值的方差越大分布越分散，方差越小分布越集中。 - 从方差大的维度开始切分可以取得很好的切分效果及平衡性。</td></tr><tr><td style="text-align:left;">中值选择优化(a)</td><td style="text-align:left;">- 算法开始前，对原始数据点在所有维度进行一次排序，存储下来。 - 在后续的中值选择中，无须每次都对其子集进行排序，提升了性能。</td></tr><tr><td style="text-align:left;">中值选择优化(b)</td><td style="text-align:left;">- 从原始数据点中随机选择固定数目的点，然后对其进行排序。 - 每次从这些样本点中取中值，来作为分割超平面。 - 该方式在实践中被证明可以取得很好性能及很好的平衡性。</td></tr></tbody></table><ul><li>取数据点在该维度的中值作为切分超平面;</li><li>将中值左侧的数据点挂在其左子树，将中值右侧的数据点挂在其右子树;</li><li>递归处理其子树，直至所有数据点挂载完毕。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token class-name">KDTree</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">BuildKDTree</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;&gt;</span> points<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> root<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> indexpart <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> temp<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>st i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> _k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        temp<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token function">each</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> var in points<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            temp<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>var<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">double</span> ave <span class="token operator">=</span> <span class="token function">accumulate</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> temp<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span> <span class="token operator">/</span> _point_num<span class="token punctuation">;</span> <span class="token comment">// 平均值</span>
        <span class="token keyword">double</span> accum <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>


        <span class="token keyword">for</span> <span class="token function">each</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> var in temp<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            accum <span class="token operator">+=</span> <span class="token punctuation">(</span>var <span class="token operator">-</span> ave<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>var <span class="token operator">-</span> ave<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//todo:方差</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>accum <span class="token operator">&gt;</span> max<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            max <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>accum<span class="token punctuation">)</span><span class="token punctuation">;</span>
            indexpart <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//此时indexpart为要进行的分裂维数</span>
    temp<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token function">each</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> var in points<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        temp<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>var<span class="token punctuation">[</span>indexpart<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//找到中值;</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> temp<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> median <span class="token operator">=</span> temp<span class="token punctuation">[</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">//将点分为左右两部分 </span>
    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;&gt;</span> leftpoints<span class="token punctuation">,</span> rightpoints<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">auto</span> var in points<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>var<span class="token punctuation">[</span>indexpart<span class="token punctuation">]</span> <span class="token operator">&lt;</span> median<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            leftpoints<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>var<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>var<span class="token punctuation">[</span>indexpart<span class="token punctuation">]</span> <span class="token operator">==</span> median<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            root<span class="token operator">-&gt;</span>m_split <span class="token operator">=</span> indexpart <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            root<span class="token operator">-&gt;</span>m_point <span class="token operator">=</span> var<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>var<span class="token punctuation">[</span>indexpart<span class="token punctuation">]</span> <span class="token operator">&gt;</span> median<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            rightpoints<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>var<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//递归</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>leftpoints<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> rightpoints<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        root<span class="token operator">-&gt;</span>is_leaf <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>leftpoints<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        root<span class="token operator">-&gt;</span>lc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token generic-function"><span class="token function">Node</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        root<span class="token operator">-&gt;</span>lc<span class="token operator">-&gt;</span>parent <span class="token operator">=</span> root<span class="token punctuation">;</span>
        <span class="token function">BuildKDTree</span><span class="token punctuation">(</span>leftpoints<span class="token punctuation">,</span> root<span class="token operator">-&gt;</span>lc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rightpoints<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        root<span class="token operator">-&gt;</span>rc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token generic-function"><span class="token function">Node</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        root<span class="token operator">-&gt;</span>rc<span class="token operator">-&gt;</span>parent <span class="token operator">=</span> root<span class="token punctuation">;</span>
        <span class="token function">BuildKDTree</span><span class="token punctuation">(</span>rightpoints<span class="token punctuation">,</span> root<span class="token operator">-&gt;</span>rc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-范围查询" tabindex="-1"><a class="header-anchor" href="#_2-范围查询" aria-hidden="true">#</a> 2. 范围查询</h5><ul><li>对于任一矩形查询区域R，查询过程从根节点出发，按如下方式递归：</li></ul><blockquote><p><strong>1)</strong> 在任意节点v处，若子树v仅含单个节点，则意味着矩阵区域v中仅覆盖单个输入点，此时可直接判断该点是否落在R内。<br><strong>2)</strong> 否则，则假定矩形区域v中包含多个输入点,这时分为三种情况：</p><ul><li><strong>a)</strong> 若矩形区域v完全包含于R内，则其中所有的输入点均落在R内，只需要遍历子树v,即可报告这部分输入点。</li><li>**b)**若二者相交，则有必要分别输入到v的左、右子树中，继续递归查询。</li><li>**c)**若二者彼此分离，则子集v中的点不可能落在R内，递归分支终止。</li></ul></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token class-name">KDTree</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">SearchRecu</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> from<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> to<span class="token punctuation">,</span> <span class="token keyword">const</span> Node<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> temp<span class="token punctuation">,</span> vector <span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;&gt;</span><span class="token operator">&amp;</span> nodes<span class="token punctuation">)</span><span class="token keyword">const</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// 如果是空树</span>
    
    <span class="token keyword">int</span> partindex <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>m_split <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 当前维度</span>
    <span class="token keyword">int</span> value <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>m_point<span class="token punctuation">[</span>partindex<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>from<span class="token punctuation">[</span>partindex<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> value <span class="token operator">&amp;&amp;</span> to<span class="token punctuation">[</span>partindex<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> value<span class="token punctuation">)</span> <span class="token comment">//点在范围内</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">bool</span> in_region <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>st i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> _k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>from<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> temp<span class="token operator">-&gt;</span>m_point<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">||</span> to<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> temp<span class="token operator">-&gt;</span>m_point<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                in_region <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>in_region<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            nodes<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>m_point<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">SearchRecu</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> to<span class="token punctuation">,</span> temp<span class="token operator">-&gt;</span>lc<span class="token punctuation">,</span> nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">SearchRecu</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> to<span class="token punctuation">,</span> temp<span class="token operator">-&gt;</span>rc<span class="token punctuation">,</span> nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&gt;</span> to<span class="token punctuation">[</span>partindex<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">SearchRecu</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> to<span class="token punctuation">,</span> temp<span class="token operator">-&gt;</span>lc<span class="token punctuation">,</span> nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> from<span class="token punctuation">[</span>partindex<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">SearchRecu</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> to<span class="token punctuation">,</span> temp<span class="token operator">-&gt;</span>rc<span class="token punctuation">,</span> nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三-实现kd树" tabindex="-1"><a class="header-anchor" href="#三-实现kd树" aria-hidden="true">#</a> 三. 实现KD树</h2><h5 id="_1-节点结构" tabindex="-1"><a class="header-anchor" href="#_1-节点结构" aria-hidden="true">#</a> 1. 节点结构</h5><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">struct</span> <span class="token class-name">Node</span>
<span class="token punctuation">{</span>
    <span class="token keyword">bool</span> is_leaf<span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> m_point<span class="token punctuation">;</span> <span class="token comment">//k维的点</span>
    <span class="token keyword">int</span> m_split<span class="token punctuation">;</span> <span class="token comment">//被分开的维度</span>
    Node<span class="token operator">*</span> parent<span class="token punctuation">;</span>
    Node<span class="token operator">*</span> lc<span class="token punctuation">;</span>
    Node<span class="token operator">*</span> rc<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-树结构" tabindex="-1"><a class="header-anchor" href="#_2-树结构" aria-hidden="true">#</a> 2. 树结构</h5><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">KDTree</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">KDTree</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;&gt;</span> allpoints<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//构造函数</span>
    <span class="token operator">~</span><span class="token function">KDTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token comment">//析构函数</span>
    <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> newpoint<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//插入结点</span>
    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;&gt;</span> <span class="token function">SearchByRegion</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> from<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> to<span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">;</span> <span class="token comment">// 查找区域</span>
    vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token function">SearchNearestNode</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> goalpoint<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//查找离目标最近的结点</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">BuildKDTree</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;&gt;</span> points<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创造树</span>
    <span class="token keyword">void</span> <span class="token function">SearchNearestByTree</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> goalpoint<span class="token punctuation">,</span> T<span class="token operator">&amp;</span> curdis<span class="token punctuation">,</span> <span class="token keyword">const</span> Node<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> treeroot<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">&amp;</span> nearestpoint<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//寻找与目标点最近的点</span>
    <span class="token keyword">void</span> <span class="token function">SearchRecu</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> from<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> to<span class="token punctuation">,</span> <span class="token keyword">const</span> Node<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> temp<span class="token punctuation">,</span> vector <span class="token operator">&lt;</span> vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;&gt;</span><span class="token operator">&amp;</span> nodes<span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">;</span> <span class="token comment">//查找区域内的点</span>
    T <span class="token function">CalDistance</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> point1<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">&gt;</span> point2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//计算距离</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    Node<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> _root<span class="token punctuation">;</span> <span class="token comment">//根节点</span>
    <span class="token keyword">int</span> _k<span class="token punctuation">;</span> <span class="token comment">//维度</span>
    <span class="token keyword">int</span> _point_num<span class="token punctuation">;</span> <span class="token comment">//点的数量</span>
    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;&gt;</span> points<span class="token punctuation">;</span> <span class="token comment">//点的集合</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-方法实现" tabindex="-1"><a class="header-anchor" href="#_3-方法实现" aria-hidden="true">#</a> 3. 方法实现</h5><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token comment">//构造函数</span>
<span class="token class-name">KDTree</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">KDTree</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;&gt;</span> allpoints<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">_k</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    _root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token generic-function"><span class="token function">Node</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    _root<span class="token operator">-&gt;</span>is_leaf <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    _root<span class="token operator">-&gt;</span>lc <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    _root<span class="token operator">-&gt;</span>rc <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>

    _point_num <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>allpoints<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    points <span class="token operator">=</span> allpoints<span class="token punctuation">;</span>
    <span class="token function">BuildKDTree</span><span class="token punctuation">(</span>allpoints<span class="token punctuation">,</span> _root<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token comment">//创造树</span>
<span class="token keyword">void</span> <span class="token class-name">KDTree</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">BuildKDTree</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;&gt;</span> points<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> root<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> indexpart <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> temp<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>st i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> _k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        temp<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token function">each</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> var in points<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            temp<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>var<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">double</span> ave <span class="token operator">=</span> <span class="token function">accumulate</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> temp<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span> <span class="token operator">/</span> _point_num<span class="token punctuation">;</span> <span class="token comment">// 平均值</span>
        <span class="token keyword">double</span> accum <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>


        <span class="token keyword">for</span> <span class="token function">each</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> var in temp<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            accum <span class="token operator">+=</span> <span class="token punctuation">(</span>var <span class="token operator">-</span> ave<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>var <span class="token operator">-</span> ave<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//todo:方差</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>accum <span class="token operator">&gt;</span> max<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            max <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>accum<span class="token punctuation">)</span><span class="token punctuation">;</span>
            indexpart <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//此时indexpart为要进行的分裂维数</span>
    temp<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token function">each</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> var in points<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        temp<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>var<span class="token punctuation">[</span>indexpart<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//找到中值;</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> temp<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> median <span class="token operator">=</span> temp<span class="token punctuation">[</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">//将点分为左右两部分 </span>
    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;&gt;</span> leftpoints<span class="token punctuation">,</span> rightpoints<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">auto</span> var in points<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>var<span class="token punctuation">[</span>indexpart<span class="token punctuation">]</span> <span class="token operator">&lt;</span> median<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            leftpoints<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>var<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>var<span class="token punctuation">[</span>indexpart<span class="token punctuation">]</span> <span class="token operator">==</span> median<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            root<span class="token operator">-&gt;</span>m_split <span class="token operator">=</span> indexpart <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            root<span class="token operator">-&gt;</span>m_point <span class="token operator">=</span> var<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>var<span class="token punctuation">[</span>indexpart<span class="token punctuation">]</span> <span class="token operator">&gt;</span> median<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            rightpoints<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>var<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//递归</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>leftpoints<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> rightpoints<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        root<span class="token operator">-&gt;</span>is_leaf <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>leftpoints<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        root<span class="token operator">-&gt;</span>lc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token generic-function"><span class="token function">Node</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        root<span class="token operator">-&gt;</span>lc<span class="token operator">-&gt;</span>parent <span class="token operator">=</span> root<span class="token punctuation">;</span>
        <span class="token function">BuildKDTree</span><span class="token punctuation">(</span>leftpoints<span class="token punctuation">,</span> root<span class="token operator">-&gt;</span>lc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rightpoints<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        root<span class="token operator">-&gt;</span>rc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token generic-function"><span class="token function">Node</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        root<span class="token operator">-&gt;</span>rc<span class="token operator">-&gt;</span>parent <span class="token operator">=</span> root<span class="token punctuation">;</span>
        <span class="token function">BuildKDTree</span><span class="token punctuation">(</span>rightpoints<span class="token punctuation">,</span> root<span class="token operator">-&gt;</span>rc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token comment">//寻找与目标点最近的点</span>
<span class="token keyword">void</span> <span class="token class-name">KDTree</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">SearchNearestByTree</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> goalpoint<span class="token punctuation">,</span> T<span class="token operator">&amp;</span> curdis<span class="token punctuation">,</span> <span class="token keyword">const</span> Node<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> treeroot<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">&amp;</span> nearestpoint<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>treeroot <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// 如果是空树</span>
    <span class="token keyword">double</span> newdis <span class="token operator">=</span> <span class="token function">CalDistance</span><span class="token punctuation">(</span>goalpoint<span class="token punctuation">,</span> treeroot<span class="token operator">-&gt;</span>m_point<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 计算距离</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>newdis <span class="token operator">&lt;</span> curdis<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        curdis <span class="token operator">=</span> newdis<span class="token punctuation">;</span>
        nearestpoint <span class="token operator">=</span> treeroot<span class="token operator">-&gt;</span>m_point<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">SearchNearestByTree</span><span class="token punctuation">(</span>goalpoint<span class="token punctuation">,</span> curdis<span class="token punctuation">,</span> treeroot<span class="token operator">-&gt;</span>lc<span class="token punctuation">,</span> nearestpoint<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SearchNearestByTree</span><span class="token punctuation">(</span>goalpoint<span class="token punctuation">,</span> curdis<span class="token punctuation">,</span> treeroot<span class="token operator">-&gt;</span>rc<span class="token punctuation">,</span> nearestpoint<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token comment">//查找区域内的点</span>
<span class="token keyword">void</span> <span class="token class-name">KDTree</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">SearchRecu</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> from<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> to<span class="token punctuation">,</span> <span class="token keyword">const</span> Node<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> temp<span class="token punctuation">,</span> vector <span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;&gt;</span><span class="token operator">&amp;</span> nodes<span class="token punctuation">)</span><span class="token keyword">const</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// 如果是空树</span>
    
    <span class="token keyword">int</span> partindex <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>m_split <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 当前维度</span>
    <span class="token keyword">int</span> value <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>m_point<span class="token punctuation">[</span>partindex<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>from<span class="token punctuation">[</span>partindex<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> value <span class="token operator">&amp;&amp;</span> to<span class="token punctuation">[</span>partindex<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> value<span class="token punctuation">)</span> <span class="token comment">//点在范围内</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">bool</span> in_region <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>st i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> _k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>from<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> temp<span class="token operator">-&gt;</span>m_point<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">||</span> to<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> temp<span class="token operator">-&gt;</span>m_point<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                in_region <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>in_region<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            nodes<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>m_point<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">SearchRecu</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> to<span class="token punctuation">,</span> temp<span class="token operator">-&gt;</span>lc<span class="token punctuation">,</span> nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">SearchRecu</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> to<span class="token punctuation">,</span> temp<span class="token operator">-&gt;</span>rc<span class="token punctuation">,</span> nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&gt;</span> to<span class="token punctuation">[</span>partindex<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">SearchRecu</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> to<span class="token punctuation">,</span> temp<span class="token operator">-&gt;</span>lc<span class="token punctuation">,</span> nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> from<span class="token punctuation">[</span>partindex<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">SearchRecu</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> to<span class="token punctuation">,</span> temp<span class="token operator">-&gt;</span>rc<span class="token punctuation">,</span> nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token comment">//计算距离</span>
T <span class="token class-name">KDTree</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">CalDistance</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> point1<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">&gt;</span> point2<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>point1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> point2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;两个点维度不同&quot;</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">double</span> distance <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>st i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> point1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        distance <span class="token operator">+=</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token punctuation">(</span>point1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> point2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>distance<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token comment">//插入结点</span>
<span class="token keyword">void</span> <span class="token class-name">KDTree</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">Insert</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> newpoint<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>newpoint<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> _k<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;插入点维数与KD树不匹配&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    Node<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> temp <span class="token operator">=</span> _root<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token comment">//若为空树</span>
    <span class="token punctuation">{</span>
        temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token generic-function"><span class="token function">Node</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        temp<span class="token operator">-&gt;</span>is_leaf <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        temp<span class="token operator">-&gt;</span>m_split <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        temp<span class="token operator">-&gt;</span>m_point <span class="token operator">=</span> newpoint<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>is_leaf<span class="token punctuation">)</span> <span class="token comment">//若树只有一个节点，插入准备</span>
    <span class="token punctuation">{</span>
        temp<span class="token operator">-&gt;</span>is_leaf <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> partindex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>st i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> _k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">double</span> delta <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>newpoint<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> temp<span class="token operator">-&gt;</span>m_point<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>delta <span class="token operator">&gt;</span> max<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                max <span class="token operator">=</span> delta<span class="token punctuation">;</span>
                temp<span class="token operator">-&gt;</span>m_split <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> partindex <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>m_split <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        Node<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> nextnode<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>newpoint<span class="token punctuation">[</span>partindex<span class="token punctuation">]</span> <span class="token operator">&gt;</span> temp<span class="token operator">-&gt;</span>m_point<span class="token punctuation">[</span>partindex<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>rc <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token comment">//右子树插入点</span>
            <span class="token punctuation">{</span>
                temp<span class="token operator">-&gt;</span>rc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token generic-function"><span class="token function">Node</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                temp<span class="token operator">-&gt;</span>rc<span class="token operator">-&gt;</span>parent <span class="token operator">=</span> temp<span class="token punctuation">;</span>
                temp<span class="token operator">-&gt;</span>rc<span class="token operator">-&gt;</span>is_leaf <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                temp<span class="token operator">-&gt;</span>rc<span class="token operator">-&gt;</span>m_split <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                temp<span class="token operator">-&gt;</span>rc<span class="token operator">-&gt;</span>m_point <span class="token operator">=</span> newpoint<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> nextnode <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>rc<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>lc <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token comment">//左子树插入</span>
            <span class="token punctuation">{</span>
                temp<span class="token operator">-&gt;</span>lc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token generic-function"><span class="token function">Node</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                temp<span class="token operator">-&gt;</span>lc<span class="token operator">-&gt;</span>parent <span class="token operator">=</span> temp<span class="token punctuation">;</span>
                temp<span class="token operator">-&gt;</span>lc<span class="token operator">-&gt;</span>is_leaf <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                temp<span class="token operator">-&gt;</span>lc<span class="token operator">-&gt;</span>m_split <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                temp<span class="token operator">-&gt;</span>lc<span class="token operator">-&gt;</span>m_point <span class="token operator">=</span> newpoint<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> nextnode <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>lc<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextnode<span class="token operator">-&gt;</span>is_leaf<span class="token punctuation">)</span> <span class="token comment">//如果是叶结点，插入准备</span>
        <span class="token punctuation">{</span>
            nextnode<span class="token operator">-&gt;</span>is_leaf <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> partindex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>st i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> _k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">double</span> delta <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>newpoint<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> nextnode<span class="token operator">-&gt;</span>m_point<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>delta <span class="token operator">&gt;</span> max<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    max <span class="token operator">=</span> delta<span class="token punctuation">;</span>
                    nextnode<span class="token operator">-&gt;</span>m_split <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        temp <span class="token operator">=</span> nextnode<span class="token punctuation">;</span> <span class="token comment">// 下一步</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token comment">// 查找区域</span>
vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;&gt;</span> <span class="token class-name">KDTree</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">SearchByRegion</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> from<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> to<span class="token punctuation">)</span><span class="token keyword">const</span>
<span class="token punctuation">{</span>
    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;&gt;</span> result<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>from<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> _k <span class="token operator">||</span> to<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> _k<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;搜索区域维数与KD树不匹配&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>st i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> _k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>from<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> to<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;区域起始点坐标大于区域终点&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">SearchRecu</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> to<span class="token punctuation">,</span> _root<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token comment">// 查找离目标最近的结点 </span>
vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token class-name">KDTree</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">SearchNearestNode</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> goalpoint<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> nearest_point<span class="token punctuation">;</span>
    Node<span class="token operator">*</span> temp <span class="token operator">=</span> _root<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>temp<span class="token operator">-&gt;</span>is_leaf<span class="token punctuation">)</span> <span class="token comment">//找到最靠近的叶结点</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> partindex <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>m_split <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>lc <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> goalpoint<span class="token punctuation">[</span>partindex<span class="token punctuation">]</span> <span class="token operator">&lt;</span> temp<span class="token operator">-&gt;</span>m_point<span class="token punctuation">[</span>partindex<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>lc<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>rc<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>rc<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    nearest_point <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>m_point<span class="token punctuation">;</span>
    <span class="token keyword">double</span> curdis <span class="token operator">=</span> <span class="token function">CalDistance</span><span class="token punctuation">(</span>goalpoint<span class="token punctuation">,</span> nearest_point<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">bool</span> is_left <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> _root<span class="token punctuation">)</span> <span class="token comment">//回溯</span>
    <span class="token punctuation">{</span>
        is_left <span class="token operator">=</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> temp<span class="token operator">-&gt;</span>parent<span class="token operator">-&gt;</span>lc<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//判断是否是左节点</span>
        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>parent<span class="token punctuation">;</span> <span class="token comment">// 指针上移</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">CalDistance</span><span class="token punctuation">(</span>goalpoint<span class="token punctuation">,</span> temp<span class="token operator">-&gt;</span>m_point<span class="token punctuation">)</span> <span class="token operator">&lt;</span> curdis<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            nearest_point <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>m_point<span class="token punctuation">;</span>
            curdis <span class="token operator">=</span> <span class="token function">CalDistance</span><span class="token punctuation">(</span>goalpoint<span class="token punctuation">,</span> nearest_point<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> partindex <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>m_split <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>

        <span class="token comment">// 判断另一边子树有没有更近的点</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>curdis <span class="token operator">&gt;</span> <span class="token function">abs</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>m_point<span class="token punctuation">[</span>partindex<span class="token punctuation">]</span> <span class="token operator">-</span> goalpoint<span class="token punctuation">[</span>partindex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>is_left<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token function">SearchNearestByTree</span><span class="token punctuation">(</span>goalpoint<span class="token punctuation">,</span> curdis<span class="token punctuation">,</span> temp<span class="token operator">-&gt;</span>rc<span class="token punctuation">,</span> nearest_point<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token function">SearchNearestByTree</span><span class="token punctuation">(</span>goalpoint<span class="token punctuation">,</span> curdis<span class="token punctuation">,</span> temp<span class="token operator">-&gt;</span>lc<span class="token punctuation">,</span> nearest_point<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> nearest_point<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16);function v(m,b){return l(),i("div",null,[k,u(" ## 三、KD树的算法 "),d])}const y=c(r,[["render",v],["__file","6_6_KD-tree.html.vue"]]);export{y as default};
