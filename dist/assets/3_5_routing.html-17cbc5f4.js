import{_ as i,a as l,b as n,c as o,d as s,e as c,f as g}from"./image-10-1e3b7fa0.js";import{_ as d}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as h,c as _,d as t,e,a as r,f}from"./app-1ed3f6c2.js";const u={},b=f('<p>布局和时钟树综合之后进行布线操作。主要内容：完成标准单元的信号线的连接，布线工具需要考虑到布线拥塞消除、优化时序、减小耦合效应、消除窜扰、降低功耗、保证信号完整性等问题。<strong>由于电路规模庞大（百万，千万条），布线问题复杂，直接求解时间复杂度高，所以将布线分为全局布线和详细布线。</strong></p><h2 id="_1-gcell-grid" tabindex="-1"><a class="header-anchor" href="#_1-gcell-grid" aria-hidden="true">#</a> 1. Gcell Grid</h2><p>Gcell Grid是一个网格结构，用于在芯片布局中进行网格化的管理。它将芯片表面划分为一系列规则的方形或正交网格单元，每个单元称为一个Gcell。Gcell Grid的目的是简化布局、布线和实现流程，确保设计的时序和布线规则得到满足。</p><p><strong>现在我们用通俗的话讲讲为什么要构建一个 Gcell Grid。</strong> 如果把布线工程比作1000块拼图工程，显然我们需要把大拼图划分成一个个具有不同特征的区块（Gcell Grid），再讲散落的拼图按区块进行划分，分成若干堆（全局布线），再对每个堆实现拼接（详细布线）。Gcell Grid另一个用出在于评判拥塞程度，具体看 2 Global Routing 部分。</p><p>基于格点的布线理论，网格的长宽都定义在Lef或者floorplan文件(.def)中，当然初始时工具会根据设计和tech lef中情况自动生成。如图所示，全局布线时，每个黑框即为一个Gcell，相同颜色的需要进行布线，具体的布线则在详细布线时发生。</p><figure><img src="'+i+'" alt="alt text" tabindex="0"><figcaption>alt text</figcaption></figure><h2 id="_2-global-routing" tabindex="-1"><a class="header-anchor" href="#_2-global-routing" aria-hidden="true">#</a> 2 Global Routing</h2><p>全局布线Global routing，简称GR。它对整块芯片的走线做布局规划，并没有进行任何实际的走线（not lay down any metal traces）</p><p>GR会为指定的金属层和Gcells分配线路，并根据分配线路的多少评判拥塞程度（congestion）。</p><figure><img src="'+l+'" alt="alt text" tabindex="0"><figcaption>alt text</figcaption></figure><p>上图为一个GCell中的示例图，如图所示，一个GCell中包含了15条tracks（通常一个gcell中会占有10几个track，根据design的不同有所变化），其中由于wires或OBS（route blockage）等被占用9条而其余6条属于可使用。global routing的目标是使得每个gcell的容量占有率在85%左右。</p><p>此图的demand = 9，supply = 15，则congestion = demand - supply = -6 （负值表示不拥塞，正值越大，拥塞程度越高）</p><p>网格上的数字表示拥塞程度，global route以gcell cell作为绕线参考网格，工具在绕线时会试图避开拥塞程度高的gcell并寻找gcell中的最短path。在global route时，软件只知道起点和终点，可以简单理解为两个具有连接关系的pin。但是不知道如何从起点走到终点。但是GR会避开拥塞高以及blockages和P/G（rings/straps/rails）等区域，这样就能大概的设计出一个走线的大致路径。</p><figure><img src="'+n+'" alt="alt text" tabindex="0"><figcaption>alt text</figcaption></figure><h2 id="_3-track-assignment" tabindex="-1"><a class="header-anchor" href="#_3-track-assignment" aria-hidden="true">#</a> 3 Track Assignment</h2><p>GR是基于gcell的分析，主要是分配绕线资源，根据global routing结果可以看看congestion情况，就是总体看绕线资源是否足够，是否合理，它并没有将绕线分配到具体的track上。布线通道分配（Track Assignment，简称TA）将GR设计的每一连线分配到一定的track上，并且对连线进行实际布线，这个阶段不做DRC检查。</p><figure><img src="'+o+'" alt="alt text" tabindex="0"><figcaption>alt text</figcaption></figure><p>如上图所示，左图是GR形成的net，并没有首尾连线，而经过经过track assignment后，形成右图完整的net。并且，在track assignment阶段，布线尽可能走长直的金属连线，但同时会减少孔的个数。为了减少孔的个数，会形成jog（小范围地改变布线方向，如下图所示）。</p><figure><img src="'+s+'" alt="alt text" tabindex="0"><figcaption>alt text</figcaption></figure><p>TA阶段不做DRC的检查，即走线会产生许多DRC：Wire spacing；Wire width；Via rules（size；density；stackable etc..），这由Detail Route修复。</p><h2 id="_4-detail-route" tabindex="-1"><a class="header-anchor" href="#_4-detail-route" aria-hidden="true">#</a> 4 Detail Route</h2><p>Detail route的工作主要将TA产生的DRC violation移除。方法：使用固定尺寸的switch box（sbox）来修复违规。Sbox是整个版图平均划分的小格子，工具对每一个小格子内部的DRC进行修复，但是边界上的DRC修复不了。</p><figure><img src="'+c+'" alt="alt text" tabindex="0"><figcaption>alt text</figcaption></figure><p>Sbox由GCell构成,每个Sbox边缘会重叠一个GCell宽度（Sbox由GCell组成，两个sbox交叠的宽度为一个GCell的宽度）。<br><img src="'+g+'" alt="alt text"></p><h2 id="_5-search-and-repair" tabindex="-1"><a class="header-anchor" href="#_5-search-and-repair" aria-hidden="true">#</a> 5 Search and repair</h2><p>Search and repair（布线修补），通过逐渐增大Sbox的尺寸寻找和消除Detail routing中没有完全消除的DRC违规。</p><h2 id="引用" tabindex="-1"><a class="header-anchor" href="#引用" aria-hidden="true">#</a> 引用</h2>',27),x={href:"https://vlsi.pro/physical-design-flow-iv-routing/",target:"_blank",rel:"noopener noreferrer"},m=t("br",null,null,-1),G={href:"https://blog.csdn.net/Tao_ZT/article/details/102456868",target:"_blank",rel:"noopener noreferrer"},k=t("br",null,null,-1),R={href:"https://blog.csdn.net/sinat_41774721/article/details/123430167",target:"_blank",rel:"noopener noreferrer"},C=t("br",null,null,-1);function D(T,S){const a=p("ExternalLinkIcon");return h(),_("div",null,[b,t("p",null,[e("[1] "),t("a",x,[e("https://vlsi.pro/physical-design-flow-iv-routing/"),r(a)]),m,e(" [2] "),t("a",G,[e("https://blog.csdn.net/Tao_ZT/article/details/102456868"),r(a)]),k,e(" [3] "),t("a",R,[e("https://blog.csdn.net/sinat_41774721/article/details/123430167"),r(a)]),C,e(" [4] 《数字集成电路物理设计》P128-138")])])}const A=d(u,[["render",D],["__file","3_5_routing.html.vue"]]);export{A as default};
