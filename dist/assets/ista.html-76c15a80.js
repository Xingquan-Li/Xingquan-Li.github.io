import{_ as a}from"./iSTA-023cb5a9.js";import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as s,f as n}from"./app-1ed3f6c2.js";const t="/res/images/tools/tool/ista/rpt.png",r="/res/images/tools/tool/ista/rpt_path.png",l="/res/images/tools/tool/ista/rpt_slack.png",d="/res/images/tools/tool/ista/cap.png",o="/res/images/tools/tool/ista/fanout.png",c="/res/images/tools/tool/ista/trans.png",h="/res/images/tools/tool/ista/skew.png",p={},u=n('<h1 id="ista用户指南" tabindex="-1"><a class="header-anchor" href="#ista用户指南" aria-hidden="true">#</a> iSTA用户指南</h1><blockquote><h2 id="ista简介" tabindex="-1"><a class="header-anchor" href="#ista简介" aria-hidden="true">#</a> iSTA简介</h2></blockquote><h3 id="软件结构图" tabindex="-1"><a class="header-anchor" href="#软件结构图" aria-hidden="true">#</a> 软件结构图</h3><div align="center"><img src="'+a+`" width="80%" height="35%" alt="iSTA-logo"><p><strong>iSTA--一款用于集成电路设计的开源智能静态时序分析工具</strong></p></div><h3 id="支持功能" tabindex="-1"><a class="header-anchor" href="#支持功能" aria-hidden="true">#</a> 支持功能</h3><ul><li>完善地支持标准输入文件（Def/Verilog，sdc，spef/sdf, liberty）读取；</li><li>延时计算除了支持NLDM/Elmore计算模型，还支持CCS电流模型，Arnoldi降阶模型；</li><li>时序分析支持Clock Gate分析，Removal/Recovery分析和Muliticycle分析；</li><li>时序路径分析模式支持OCV模式和AOCV模式；</li><li>噪声分析初步支持了Crosstalk的影响，未来将进一步完善；</li><li>提供时序分析引擎timing engine供物理设计调用。</li></ul><hr><blockquote><h2 id="ista使用示例" tabindex="-1"><a class="header-anchor" href="#ista使用示例" aria-hidden="true">#</a> iSTA使用示例</h2></blockquote><h3 id="编写tcl文件-run-ista-tcl" tabindex="-1"><a class="header-anchor" href="#编写tcl文件-run-ista-tcl" aria-hidden="true">#</a> 编写tcl文件(run_ista.tcl)</h3><p>示例tcl文件位于: /src/operation/iSTA/source/data/example1/run_ista.tcl</p><h4 id="设置时序报告输出路径" tabindex="-1"><a class="header-anchor" href="#设置时序报告输出路径" aria-hidden="true">#</a> 设置时序报告输出路径</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">set</span> work_dir <span class="token string">&quot;../src/operation/iSTA/source/data/example1&quot;</span>
set_design_workspace <span class="token variable">$work_dir</span>/rpt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="读取verilog文件" tabindex="-1"><a class="header-anchor" href="#读取verilog文件" aria-hidden="true">#</a> 读取verilog文件</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>read_netlist <span class="token variable">$work_dir</span>/example1.v
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="读取-lib文件" tabindex="-1"><a class="header-anchor" href="#读取-lib文件" aria-hidden="true">#</a> 读取.lib文件</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">set</span> LIB_FILES <span class="token variable">$work_dir</span>/example1_slow.lib
read_liberty <span class="token variable">$LIB_FILES</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="链接设计到网表" tabindex="-1"><a class="header-anchor" href="#链接设计到网表" aria-hidden="true">#</a> 链接设计到网表</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>link_design <span class="token function">top</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="读取sdc文件" tabindex="-1"><a class="header-anchor" href="#读取sdc文件" aria-hidden="true">#</a> 读取sdc文件</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>read_sdc  <span class="token variable">$work_dir</span>/example1.sdc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="读取spef文件" tabindex="-1"><a class="header-anchor" href="#读取spef文件" aria-hidden="true">#</a> 读取spef文件</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>read_spef <span class="token variable">$work_dir</span>/example1.spef
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="获取时序报告" tabindex="-1"><a class="header-anchor" href="#获取时序报告" aria-hidden="true">#</a> 获取时序报告</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>report_timing
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>时序报告位于第一步设置的时序报告输出路径下，包括</p><ul><li>top.rpt（报告 WNS,TNS 和时序路径）</li></ul><p>如图所示，报告最开始显示的路径是WNS（Worst Negative Slack）路径，<br> 默认max(Setup)/min(Hold)分别显示三条。接下来是TNS报告，每个时钟分别<br> 报告TNS (Total Negative Slack)，分为max/min。</p><div align="center"><img src="`+t+'" width="80%" height="35%" alt="iSTA-rpt"><p><strong>iSTA时序报告WNS、TNS部分</strong></p></div><p>后面开始是每个路径的详细报告。时序路径的报告部分，主要包含Arrival Time<br> 和Require Time，以及报告的slack三部分。<br> Arrival Time和Require Time的分为Point、Fanout、Capacitance、<br> Resistance、Transition、Delta Delay、Incr、Path列，如图所示：</p><div align="center"><img src="'+r+'" width="80%" height="35%" alt="iSTA-rpt"><p><strong>iSTA时序报告详细路径Arrival Time和Require Time部分</strong></p></div><p>路径Slack部分在路径的最后面，如图所示：</p><div align="center"><img src="'+l+'" width="80%" height="35%" alt="iSTA-rpt"><p><strong>iSTA时序报告详细路径Slack部分</strong></p></div><ul><li>top.cap（报告违例电容）</li></ul><p>电容报告包含Net/Pin列、MaxCapacitance、Capacitance、CapacitanceSlack、LibCellPort列，详细如下</p><div align="center"><img src="'+d+'" width="80%" height="35%" alt="iSTA-rpt"><p><strong>iSTA时序报告cap报告</strong></p></div><ul><li>top.fanout（报告违例扇出）</li></ul><p>Fanout报告和电容报告类似，包含Net/Pin列、MaxFanout、Fanout、FanoutSlack、LibCellPort列，详细如下</p><div align="center"><img src="'+o+'" width="80%" height="35%" alt="iSTA-rpt"><p><strong>iSTA时序报告fanout报告</strong></p></div><ul><li>top.trans（报告违例转换时间）</li></ul><p>Fanout报告同样类似，包含Net/Pin列、MaxSlewTime、SlewTime、SlewSlack、LibCellPort列，详细如下</p><div align="center"><img src="'+c+'" width="80%" height="35%" alt="iSTA-rpt"><p><strong>iSTA时序报告transition报告</strong></p></div><ul><li>top_setup.skew（报告hold模式下的时钟偏斜)</li></ul><p>skew报告类似于时钟路径报告，skew是时钟到达两个时钟Pin的差值，两个时钟Pin分别为发射时钟<br> 和接收时钟的Pin，两两构成一个时序路径。skew报告分为三部分发射时钟Pin的latency，<br> 接收时钟Pin的latency，skew报告。</p><div align="center"><img src="'+h+`" width="80%" height="35%" alt="iSTA-rpt"><p><strong>iSTA时序报告skew报告</strong></p></div><ul><li>top_hold.skew（报告setup模式下的时钟偏斜）<br> 和setup报告类似，只是是hold时序路径的clock skew。</li></ul><h3 id="编译ista-ista位于-bin" tabindex="-1"><a class="header-anchor" href="#编译ista-ista位于-bin" aria-hidden="true">#</a> 编译iSTA（iSTA位于:bin/）</h3><h3 id="使用ista运行tcl文件" tabindex="-1"><a class="header-anchor" href="#使用ista运行tcl文件" aria-hidden="true">#</a> 使用iSTA运行tcl文件</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token builtin class-name">cd</span> bin/
 ./iSTA run_ista.tcl
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,48),g=[u];function m(b,v){return i(),s("div",null,g)}const T=e(p,[["render",m],["__file","ista.html.vue"]]);export{T as default};
