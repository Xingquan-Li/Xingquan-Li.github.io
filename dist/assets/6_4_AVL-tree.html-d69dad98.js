import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as p}from"./app-1ed3f6c2.js";const t={},o=p(`<h1 id="avl树" tabindex="-1"><a class="header-anchor" href="#avl树" aria-hidden="true">#</a> AVL树</h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><blockquote><p>AVL树：是最早被发明的自平衡二叉查找树。在AVL树中，<strong>任一节点对应的两棵子树的最大高度差为1</strong>，因此它也被称为<strong>高度平衡树</strong>。查找、插入和删除在平均和最坏情况下的时间复杂度都是<img src="https://math.jianshu.com/math?formula={\\displaystyle O(\\log {n})}" alt="{isplaystyle O(og {n})}">。增加和删除元素的操作则可能需要借由一次或多次树旋转，以实现树的重新平衡。</p></blockquote><h2 id="树结点类、平衡二叉树类" tabindex="-1"><a class="header-anchor" href="#树结点类、平衡二叉树类" aria-hidden="true">#</a> 树结点类、平衡二叉树类</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">KeyType</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">AVLNode</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
        KeyType key<span class="token punctuation">;</span>
        AVLNode <span class="token operator">*</span>left<span class="token punctuation">;</span>
        AVLNode <span class="token operator">*</span>right<span class="token punctuation">;</span>
        <span class="token function">AVLNode</span><span class="token punctuation">(</span>KeyType k<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">key</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">right</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">KeyType</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">AVLTree</span><span class="token punctuation">{</span>
    <span class="token keyword">typedef</span> AVLNode<span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span> Node<span class="token punctuation">;</span>
    <span class="token keyword">private</span><span class="token operator">:</span>
        Node <span class="token operator">*</span>avlroot<span class="token punctuation">;</span>
        <span class="token keyword">int</span> <span class="token function">__getheight</span><span class="token punctuation">(</span><span class="token keyword">const</span> Node <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//求树的高度</span>
        <span class="token keyword">int</span> <span class="token function">__diff</span><span class="token punctuation">(</span><span class="token keyword">const</span> Node <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//求平衡因子</span>
        Node <span class="token operator">*</span><span class="token function">__insert</span><span class="token punctuation">(</span>Node <span class="token operator">*</span><span class="token operator">&amp;</span>root<span class="token punctuation">,</span><span class="token keyword">const</span> KeyType key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//插入内部实现</span>
        Node <span class="token operator">*</span><span class="token function">__delnode</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">,</span><span class="token keyword">const</span> KeyType key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除内部实现</span>
        Node <span class="token operator">*</span><span class="token function">__balance</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//平衡操作</span>
        <span class="token comment">//四种旋转操作</span>
        Node <span class="token operator">*</span><span class="token function">__rotation_ll</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Node <span class="token operator">*</span><span class="token function">__rotation_rr</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Node <span class="token operator">*</span><span class="token function">__rotation_lr</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Node <span class="token operator">*</span><span class="token function">__rotation_rl</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Node <span class="token operator">*</span><span class="token function">__search</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">,</span><span class="token keyword">const</span> KeyType key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查找内部实现</span>
        <span class="token keyword">void</span> <span class="token function">__traversal</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//遍历(中序)内部实现</span>
        <span class="token keyword">void</span> <span class="token function">__deleteTree</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除树</span>
        Node <span class="token operator">*</span><span class="token function">__treeMax</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//前根节点最大</span>
        Node <span class="token operator">*</span><span class="token function">__treeMin</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//前根节点最小</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
        <span class="token function">AVLTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>avlroot <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment">//默认构造函数</span>
        <span class="token operator">~</span><span class="token function">AVLTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">AVLTree</span><span class="token punctuation">(</span><span class="token keyword">const</span> KeyType <span class="token operator">*</span>arr<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//构造函数，数组构造</span>
        <span class="token keyword">bool</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">const</span> KeyType key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//插入外部接口</span>
        <span class="token keyword">bool</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">const</span> KeyType key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查找外部接口</span>
        <span class="token keyword">void</span> <span class="token function">traversal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//遍历(中序)外部接口</span>
        <span class="token keyword">bool</span> <span class="token function">delnode</span><span class="token punctuation">(</span><span class="token keyword">const</span> KeyType key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除外部接口</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="插入操作" tabindex="-1"><a class="header-anchor" href="#插入操作" aria-hidden="true">#</a> 插入操作</h2><p>思路很简单，小于当前结点的值，往左走；大于当前结点的值，往右走。每次插入后需要进行平衡操作，保证树的平衡</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">//插入内部实现</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">KeyType</span><span class="token operator">&gt;</span>
AVLNode<span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span> <span class="token operator">*</span><span class="token class-name">AVLTree</span><span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">__insert</span><span class="token punctuation">(</span>Node <span class="token operator">*</span><span class="token operator">&amp;</span>root<span class="token punctuation">,</span><span class="token keyword">const</span> KeyType key<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">&lt;</span> root<span class="token operator">-&gt;</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//小于当前结点的值，往左走</span>
        <span class="token function">__insert</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        root <span class="token operator">=</span> <span class="token function">__balance</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//平衡当前结点</span>
        <span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">&gt;</span> root<span class="token operator">-&gt;</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//大于当前结点的值，往右走</span>
        <span class="token function">__insert</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        root <span class="token operator">=</span> <span class="token function">__balance</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//平衡当前结点</span>
        <span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>   
<span class="token punctuation">}</span>

<span class="token comment">//插入外部接口</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">KeyType</span><span class="token operator">&gt;</span>
<span class="token keyword">bool</span> <span class="token class-name">AVLTree</span><span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">const</span> KeyType key<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">__insert</span><span class="token punctuation">(</span>avlroot<span class="token punctuation">,</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="平衡操作" tabindex="-1"><a class="header-anchor" href="#平衡操作" aria-hidden="true">#</a> 平衡操作</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">//求树的高度</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">KeyType</span><span class="token operator">&gt;</span>
<span class="token keyword">int</span> <span class="token class-name">AVLTree</span><span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">__getheight</span><span class="token punctuation">(</span><span class="token keyword">const</span> Node <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">__getheight</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token function">__getheight</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//求平衡因子</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">KeyType</span><span class="token operator">&gt;</span>
<span class="token keyword">int</span> <span class="token class-name">AVLTree</span><span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">__diff</span><span class="token punctuation">(</span><span class="token keyword">const</span> Node <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">__getheight</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">__getheight</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//平衡操作</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">KeyType</span><span class="token operator">&gt;</span>
AVLNode<span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span> <span class="token operator">*</span><span class="token class-name">AVLTree</span><span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">__balance</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> dis <span class="token operator">=</span> <span class="token function">__diff</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>dis <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//左子树高于右子树</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">__diff</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            root <span class="token operator">=</span> <span class="token function">__rotation_ll</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左左旋转</span>
        <span class="token keyword">else</span>
            root <span class="token operator">=</span> <span class="token function">__rotation_lr</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左右旋转</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>dis <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//右子树高于左子树</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">__diff</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            root <span class="token operator">=</span> <span class="token function">__rotation_rr</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右右旋转</span>
        <span class="token keyword">else</span>
            root <span class="token operator">=</span> <span class="token function">__rotation_rl</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右左旋转</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="旋转操作" tabindex="-1"><a class="header-anchor" href="#旋转操作" aria-hidden="true">#</a> 旋转操作</h2><p>平衡二叉树的核心部分就是旋转操作，为了保证二叉树的平衡，在每一次插入和删除结点时都需要判断当前结点是否平衡，如何不平衡就需要进行旋转操作，根据二叉树的实际情况可分为4种：单旋转(左左、右右)，双旋转(左右、右左)。百度有很多详细的讲解，这里不在赘述，代码如下：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">//四种旋转</span>
template <span class="token operator">&lt;</span>typename KeyType<span class="token operator">&gt;</span>
AVLNode<span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span> <span class="token operator">*</span>AVLTree<span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span><span class="token operator">::</span><span class="token function">__rotation_ll</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>
    Node <span class="token operator">*</span>temp <span class="token operator">=</span> root<span class="token operator">-&gt;</span><span class="token property">left</span><span class="token punctuation">;</span>
    root<span class="token operator">-&gt;</span><span class="token property">left</span> <span class="token operator">=</span> temp<span class="token operator">-&gt;</span><span class="token property">right</span><span class="token punctuation">;</span>
    temp<span class="token operator">-&gt;</span><span class="token property">right</span> <span class="token operator">=</span> root<span class="token punctuation">;</span>
    <span class="token keyword">return</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
template <span class="token operator">&lt;</span>typename KeyType<span class="token operator">&gt;</span>
AVLNode<span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span> <span class="token operator">*</span>AVLTree<span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span><span class="token operator">::</span><span class="token function">__rotation_rr</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>
    Node <span class="token operator">*</span>temp <span class="token operator">=</span> root<span class="token operator">-&gt;</span><span class="token property">right</span><span class="token punctuation">;</span>
    root<span class="token operator">-&gt;</span><span class="token property">right</span> <span class="token operator">=</span> temp<span class="token operator">-&gt;</span><span class="token property">left</span><span class="token punctuation">;</span>
    temp<span class="token operator">-&gt;</span><span class="token property">left</span> <span class="token operator">=</span> root<span class="token punctuation">;</span>
    <span class="token keyword">return</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
template <span class="token operator">&lt;</span>typename KeyType<span class="token operator">&gt;</span>
AVLNode<span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span> <span class="token operator">*</span>AVLTree<span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span><span class="token operator">::</span><span class="token function">__rotation_lr</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>
    root<span class="token operator">-&gt;</span><span class="token property">left</span> <span class="token operator">=</span> <span class="token function">__rotation_rr</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span><span class="token property">left</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">__rotation_ll</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
template <span class="token operator">&lt;</span>typename KeyType<span class="token operator">&gt;</span>
AVLNode<span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span> <span class="token operator">*</span>AVLTree<span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span><span class="token operator">::</span><span class="token function">__rotation_rl</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>
    root<span class="token operator">-&gt;</span><span class="token property">right</span> <span class="token operator">=</span> <span class="token function">__rotation_ll</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span><span class="token property">right</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">__rotation_rr</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="删除结点" tabindex="-1"><a class="header-anchor" href="#删除结点" aria-hidden="true">#</a> 删除结点</h6><p>删除结点时，需要分情况讨论，且在删除结点后记得平衡操作</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">//删除结点内部实现</span>
template <span class="token operator">&lt;</span>typename KeyType<span class="token operator">&gt;</span>
AVLNode<span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span> <span class="token operator">*</span>AVLTree<span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span><span class="token operator">::</span><span class="token function">__delnode</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">,</span><span class="token keyword">const</span> KeyType key<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> nullptr<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">search</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//删除的结点不存在</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string double-quoted-string">&quot;Key not find!&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">==</span> root<span class="token operator">-&gt;</span><span class="token property">key</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span><span class="token property">left</span> <span class="token operator">!=</span> nullptr <span class="token operator">&amp;&amp;</span> root<span class="token operator">-&gt;</span><span class="token property">right</span> <span class="token operator">!=</span> nullptr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//删除的结点左右子树都非空</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">__diff</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//左子树更高</span>
                root<span class="token operator">-&gt;</span><span class="token property">key</span> <span class="token operator">=</span> <span class="token function">__treeMax</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span><span class="token property">left</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token property">key</span><span class="token punctuation">;</span>  <span class="token comment">//寻找左子树的最大值来替换当前结点，使其下沉为叶子结点</span>
                root<span class="token operator">-&gt;</span><span class="token property">left</span> <span class="token operator">=</span> <span class="token function">__delnode</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span><span class="token property">left</span><span class="token punctuation">,</span> root<span class="token operator">-&gt;</span><span class="token property">key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//删除左子树中被替换当前结点</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>  <span class="token comment">//右子树更高</span>
                root<span class="token operator">-&gt;</span><span class="token property">key</span> <span class="token operator">=</span> <span class="token function">__treeMin</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span><span class="token property">right</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token property">key</span><span class="token punctuation">;</span>  <span class="token comment">//寻找右子树的最小值来替换当前结点</span>
                root<span class="token operator">-&gt;</span><span class="token property">right</span> <span class="token operator">=</span> <span class="token function">__delnode</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span><span class="token property">right</span><span class="token punctuation">,</span> root<span class="token operator">-&gt;</span><span class="token property">key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>  <span class="token comment">//删除的结点有一个孩子或删除的结点自身为叶子节点</span>
            Node <span class="token operator">*</span> temp <span class="token operator">=</span> root<span class="token punctuation">;</span>
            root <span class="token operator">=</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span><span class="token property">left</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span><span class="token property">left</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span><span class="token property">right</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            delete temp<span class="token punctuation">;</span>
            temp <span class="token operator">=</span> nullptr<span class="token punctuation">;</span>  <span class="token comment">//避免出现野指针</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">&lt;</span> root<span class="token operator">-&gt;</span><span class="token property">key</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//小于当前结点的值，往左子树寻找</span>
        root<span class="token operator">-&gt;</span><span class="token property">left</span> <span class="token operator">=</span> <span class="token function">__delnode</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span><span class="token property">left</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        root <span class="token operator">=</span> <span class="token function">__balance</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>  <span class="token comment">//大于当前结点的值，往右子树寻找</span>
        root<span class="token operator">-&gt;</span><span class="token property">right</span> <span class="token operator">=</span> <span class="token function">__delnode</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span><span class="token property">right</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        root <span class="token operator">=</span> <span class="token function">__balance</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//删除外部接口</span>
template <span class="token operator">&lt;</span>typename KeyType<span class="token operator">&gt;</span>
<span class="token keyword type-declaration">bool</span> AVLTree<span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span><span class="token operator">::</span><span class="token function">delnode</span><span class="token punctuation">(</span><span class="token keyword">const</span> KeyType key<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">__delnode</span><span class="token punctuation">(</span>avlroot<span class="token punctuation">,</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> nullptr <span class="token operator">?</span> <span class="token constant boolean">false</span> <span class="token punctuation">:</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="整体实现代码以及测试" tabindex="-1"><a class="header-anchor" href="#整体实现代码以及测试" aria-hidden="true">#</a> 整体实现代码以及测试</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">KeyType</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">AVLNode</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
        KeyType key<span class="token punctuation">;</span>
        AVLNode <span class="token operator">*</span>left<span class="token punctuation">;</span>
        AVLNode <span class="token operator">*</span>right<span class="token punctuation">;</span>
        <span class="token function">AVLNode</span><span class="token punctuation">(</span>KeyType k<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">key</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">right</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">KeyType</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">AVLTree</span><span class="token punctuation">{</span>
    <span class="token keyword">typedef</span> AVLNode<span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span> Node<span class="token punctuation">;</span>
    <span class="token keyword">private</span><span class="token operator">:</span>
        Node <span class="token operator">*</span>avlroot<span class="token punctuation">;</span>
        <span class="token keyword">int</span> <span class="token function">__getheight</span><span class="token punctuation">(</span><span class="token keyword">const</span> Node <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//求树的高度</span>
        <span class="token keyword">int</span> <span class="token function">__diff</span><span class="token punctuation">(</span><span class="token keyword">const</span> Node <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//求平衡因子</span>
        Node <span class="token operator">*</span><span class="token function">__insert</span><span class="token punctuation">(</span>Node <span class="token operator">*</span><span class="token operator">&amp;</span>root<span class="token punctuation">,</span><span class="token keyword">const</span> KeyType key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//插入内部实现</span>
        Node <span class="token operator">*</span><span class="token function">__delnode</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">,</span><span class="token keyword">const</span> KeyType key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除内部实现</span>
        Node <span class="token operator">*</span><span class="token function">__balance</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//平衡操作</span>
        <span class="token comment">//四种旋转操作</span>
        Node <span class="token operator">*</span><span class="token function">__rotation_ll</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Node <span class="token operator">*</span><span class="token function">__rotation_rr</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Node <span class="token operator">*</span><span class="token function">__rotation_lr</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Node <span class="token operator">*</span><span class="token function">__rotation_rl</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Node <span class="token operator">*</span><span class="token function">__search</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">,</span><span class="token keyword">const</span> KeyType key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查找内部实现</span>
        <span class="token keyword">void</span> <span class="token function">__traversal</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//遍历(中序)内部实现</span>
        <span class="token keyword">void</span> <span class="token function">__deleteTree</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除树</span>
        Node <span class="token operator">*</span><span class="token function">__treeMax</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//前根节点最大</span>
        Node <span class="token operator">*</span><span class="token function">__treeMin</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//前根节点最小</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
        <span class="token function">AVLTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>avlroot <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment">//默认构造函数</span>
        <span class="token operator">~</span><span class="token function">AVLTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">AVLTree</span><span class="token punctuation">(</span><span class="token keyword">const</span> KeyType <span class="token operator">*</span>arr<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//构造函数，数组构造</span>
        <span class="token keyword">bool</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">const</span> KeyType key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//插入外部接口</span>
        <span class="token keyword">bool</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">const</span> KeyType key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查找外部接口</span>
        <span class="token keyword">void</span> <span class="token function">traversal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//遍历(中序)外部接口</span>
        <span class="token keyword">bool</span> <span class="token function">delnode</span><span class="token punctuation">(</span><span class="token keyword">const</span> KeyType key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除外部接口</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">//所有内部实现</span>
<span class="token comment">//求树的高度</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">KeyType</span><span class="token operator">&gt;</span>
<span class="token keyword">int</span> <span class="token class-name">AVLTree</span><span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">__getheight</span><span class="token punctuation">(</span><span class="token keyword">const</span> Node <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">__getheight</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token function">__getheight</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//求平衡因子</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">KeyType</span><span class="token operator">&gt;</span>
<span class="token keyword">int</span> <span class="token class-name">AVLTree</span><span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">__diff</span><span class="token punctuation">(</span><span class="token keyword">const</span> Node <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">__getheight</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">__getheight</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//插入内部实现</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">KeyType</span><span class="token operator">&gt;</span>
AVLNode<span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span> <span class="token operator">*</span><span class="token class-name">AVLTree</span><span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">__insert</span><span class="token punctuation">(</span>Node <span class="token operator">*</span><span class="token operator">&amp;</span>root<span class="token punctuation">,</span><span class="token keyword">const</span> KeyType key<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">&lt;</span> root<span class="token operator">-&gt;</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">__insert</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        root <span class="token operator">=</span> <span class="token function">__balance</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">&gt;</span> root<span class="token operator">-&gt;</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">__insert</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        root <span class="token operator">=</span> <span class="token function">__balance</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>   
<span class="token punctuation">}</span>

<span class="token comment">//平衡操作</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">KeyType</span><span class="token operator">&gt;</span>
AVLNode<span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span> <span class="token operator">*</span><span class="token class-name">AVLTree</span><span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">__balance</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> dis <span class="token operator">=</span> <span class="token function">__diff</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>dis <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//左子树高于右子树</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">__diff</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            root <span class="token operator">=</span> <span class="token function">__rotation_ll</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            root <span class="token operator">=</span> <span class="token function">__rotation_lr</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>dis <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//右子树高于左子树</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">__diff</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            root <span class="token operator">=</span> <span class="token function">__rotation_rr</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            root <span class="token operator">=</span> <span class="token function">__rotation_rl</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//四种旋转</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">KeyType</span><span class="token operator">&gt;</span>
AVLNode<span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span> <span class="token operator">*</span><span class="token class-name">AVLTree</span><span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">__rotation_ll</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>
    Node <span class="token operator">*</span>temp <span class="token operator">=</span> root<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
    root<span class="token operator">-&gt;</span>left <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
    temp<span class="token operator">-&gt;</span>right <span class="token operator">=</span> root<span class="token punctuation">;</span>
    <span class="token keyword">return</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">KeyType</span><span class="token operator">&gt;</span>
AVLNode<span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span> <span class="token operator">*</span><span class="token class-name">AVLTree</span><span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">__rotation_rr</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>
    Node <span class="token operator">*</span>temp <span class="token operator">=</span> root<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
    root<span class="token operator">-&gt;</span>right <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
    temp<span class="token operator">-&gt;</span>left <span class="token operator">=</span> root<span class="token punctuation">;</span>
    <span class="token keyword">return</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">KeyType</span><span class="token operator">&gt;</span>
AVLNode<span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span> <span class="token operator">*</span><span class="token class-name">AVLTree</span><span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">__rotation_lr</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>
    root<span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token function">__rotation_rr</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">__rotation_ll</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">KeyType</span><span class="token operator">&gt;</span>
AVLNode<span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span> <span class="token operator">*</span><span class="token class-name">AVLTree</span><span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">__rotation_rl</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>
    root<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token function">__rotation_ll</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">__rotation_rr</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//查找内部实现</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">KeyType</span><span class="token operator">&gt;</span>
AVLNode<span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span> <span class="token operator">*</span><span class="token class-name">AVLTree</span><span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">__search</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">,</span><span class="token keyword">const</span> KeyType key<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">==</span> root<span class="token operator">-&gt;</span>key<span class="token punctuation">)</span>
        <span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">&lt;</span> root<span class="token operator">-&gt;</span>key<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token function">__search</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token keyword">return</span> <span class="token function">__search</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//遍历(中序)内部实现</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">KeyType</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token class-name">AVLTree</span><span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">__traversal</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token function">__traversal</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> root<span class="token operator">-&gt;</span>key <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
    <span class="token function">__traversal</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">KeyType</span><span class="token operator">&gt;</span>
AVLNode<span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span> <span class="token operator">*</span><span class="token class-name">AVLTree</span><span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">__treeMax</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">__treeMax</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span> <span class="token operator">:</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">KeyType</span><span class="token operator">&gt;</span>
AVLNode<span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span> <span class="token operator">*</span><span class="token class-name">AVLTree</span><span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">__treeMin</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">__treeMin</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span> <span class="token operator">:</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//删除结点内部实现</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">KeyType</span><span class="token operator">&gt;</span>
AVLNode<span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span> <span class="token operator">*</span><span class="token class-name">AVLTree</span><span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">__delnode</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">,</span><span class="token keyword">const</span> KeyType key<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">search</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Key not find!&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">==</span> root<span class="token operator">-&gt;</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> root<span class="token operator">-&gt;</span>right <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">__diff</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                root<span class="token operator">-&gt;</span>key <span class="token operator">=</span> <span class="token function">__treeMax</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token operator">-&gt;</span>key<span class="token punctuation">;</span>
                root<span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token function">__delnode</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> root<span class="token operator">-&gt;</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                root<span class="token operator">-&gt;</span>key <span class="token operator">=</span> <span class="token function">__treeMin</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token operator">-&gt;</span>key<span class="token punctuation">;</span>
                root<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token function">__delnode</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> root<span class="token operator">-&gt;</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            Node <span class="token operator">*</span> temp <span class="token operator">=</span> root<span class="token punctuation">;</span>
            root <span class="token operator">=</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">delete</span> temp<span class="token punctuation">;</span>
            temp <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">&lt;</span> root<span class="token operator">-&gt;</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>
        root<span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token function">__delnode</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        root <span class="token operator">=</span> <span class="token function">__balance</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        root<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token function">__delnode</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        root <span class="token operator">=</span> <span class="token function">__balance</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//删除树</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">KeyType</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token class-name">AVLTree</span><span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">__deleteTree</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token function">__deleteTree</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">__deleteTree</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">delete</span> root<span class="token punctuation">;</span>
    root <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//所有外部接口</span>
<span class="token comment">//构造函数-数组构造</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">KeyType</span><span class="token operator">&gt;</span>
<span class="token class-name">AVLTree</span><span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">AVLTree</span><span class="token punctuation">(</span><span class="token keyword">const</span> KeyType <span class="token operator">*</span>arr<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>
    avlroot <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">insert</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>arr <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//插入外部接口</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">KeyType</span><span class="token operator">&gt;</span>
<span class="token keyword">bool</span> <span class="token class-name">AVLTree</span><span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">const</span> KeyType key<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">__insert</span><span class="token punctuation">(</span>avlroot<span class="token punctuation">,</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//查找外部接口</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">KeyType</span><span class="token operator">&gt;</span>
<span class="token keyword">bool</span> <span class="token class-name">AVLTree</span><span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">const</span> KeyType key<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">__search</span><span class="token punctuation">(</span>avlroot<span class="token punctuation">,</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//遍历(中序)外部接口</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">KeyType</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token class-name">AVLTree</span><span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">traversal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">__traversal</span><span class="token punctuation">(</span>avlroot<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//删除外部接口</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">KeyType</span><span class="token operator">&gt;</span>
<span class="token keyword">bool</span> <span class="token class-name">AVLTree</span><span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">delnode</span><span class="token punctuation">(</span><span class="token keyword">const</span> KeyType key<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">__delnode</span><span class="token punctuation">(</span>avlroot<span class="token punctuation">,</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//析构函数</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">KeyType</span><span class="token operator">&gt;</span>
AVLTree<span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">AVLTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">__deleteTree</span><span class="token punctuation">(</span>avlroot<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    AVLTree<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">tree</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    tree<span class="token punctuation">.</span><span class="token function">traversal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    tree<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    tree<span class="token punctuation">.</span><span class="token function">traversal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Found!&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Not Found!&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    tree<span class="token punctuation">.</span><span class="token function">delnode</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    tree<span class="token punctuation">.</span><span class="token function">traversal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Found!&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Not Found!&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18),e=[o];function c(l,r){return s(),a("div",null,e)}const k=n(t,[["render",c],["__file","6_4_AVL-tree.html.vue"]]);export{k as default};
