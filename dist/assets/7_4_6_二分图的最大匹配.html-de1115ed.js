const t=JSON.parse('{"key":"v-dc3941f6","path":"/train/eda/algorithm-data/Part_7_algorithm/7_4_graph/7_4_6_%E4%BA%8C%E5%88%86%E5%9B%BE%E7%9A%84%E6%9C%80%E5%A4%A7%E5%8C%B9%E9%85%8D.html","title":"7.4.6 二分图最大匹配","lang":"zh-CN","frontmatter":{"title":"7.4.6 二分图最大匹配","order":6},"headers":[],"git":{"createdTime":1721900327000,"updatedTime":1721900327000,"contributors":[{"name":"simintao","email":"simintao@126.com","commits":1}]},"readingTime":{"minutes":7.59,"words":2276},"filePathRelative":"train/eda/algorithm-data/Part_7_algorithm/7_4_graph/7_4_6_二分图的最大匹配.md","localizedDate":"2024年7月25日","excerpt":"<h1> 二分图的最大匹配</h1>\\n<p>这篇文章讲无权二分图（unweighted bipartite graph）的最大匹配（maximum matching）和完美匹配（perfect matching），以及用于求解匹配的匈牙利算法（Hungarian Algorithm）；不讲带权二分图的最佳匹配。</p>\\n<p><strong>二分图</strong>：简单来说，如果图中点可以被分为两组，并且使得所有边都跨越组的边界，则这就是一个二分图。准确地说：把一个图的顶点划分为两个不相交集 UU 和VV ，使得每一条边都分别连接UU、VV中的顶点。如果存在这样的划分，则此图为一个二分图。二分图的一个等价定义是：不含有「含奇数条边的环」的图。图 1 是一个二分图。为了清晰，我们以后都把它画成图 2 的形式。</p>","copyright":{"author":"iEDA","license":"GPL-3.0"}}');export{t as data};
