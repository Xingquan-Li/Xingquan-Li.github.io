import{_ as e}from"./iSTA-023cb5a9.js";import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as s,f as t}from"./app-1ed3f6c2.js";const n={},r=t('<h1 id="ista-user-guide" tabindex="-1"><a class="header-anchor" href="#ista-user-guide" aria-hidden="true">#</a> iSTA User Guide</h1><blockquote><h2 id="introduction-to-ista" tabindex="-1"><a class="header-anchor" href="#introduction-to-ista" aria-hidden="true">#</a> Introduction to iSTA</h2></blockquote><h3 id="software-structure-diagram" tabindex="-1"><a class="header-anchor" href="#software-structure-diagram" aria-hidden="true">#</a> Software Structure Diagram</h3><div align="center"><img src="'+e+`" width="80%" height="35%" alt="iSTA-logo"><p><strong>iSTA - An Open Source Intelligent Static Timing Analysis Tool for Integrated Circuit Design</strong></p></div><h3 id="supported-functions" tabindex="-1"><a class="header-anchor" href="#supported-functions" aria-hidden="true">#</a> Supported Functions</h3><ul><li>Fully supports reading of standard input files (Def/Verilog, sdc, spef/sdf, liberty);</li><li>For delay calculation, in addition to supporting NLDM/Elmore calculation models, it also supports CCS current models and Arnoldi reduced-order models;</li><li>Timing analysis supports Clock Gate analysis, Removal/Recovery analysis and Muliticycle analysis;</li><li>Timing path analysis modes support OCV mode and AOCV mode;</li><li>Noise analysis initially supports the influence of Crosstalk and will be further improved in the future;</li><li>Provides the timing analysis engine timing engine for physical design calls.</li></ul><hr><blockquote><h2 id="ista-usage-example" tabindex="-1"><a class="header-anchor" href="#ista-usage-example" aria-hidden="true">#</a> iSTA Usage Example</h2></blockquote><h3 id="writing-a-tcl-file-run-ista-tcl" tabindex="-1"><a class="header-anchor" href="#writing-a-tcl-file-run-ista-tcl" aria-hidden="true">#</a> Writing a tcl File (run_ista.tcl)</h3><p>The example tcl file is located at: /src/operation/iSTA/source/data/example1/run_ista.tcl</p><h4 id="set-the-output-path-for-the-timing-report" tabindex="-1"><a class="header-anchor" href="#set-the-output-path-for-the-timing-report" aria-hidden="true">#</a> Set the output path for the timing report</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">set</span> work_dir <span class="token string">&quot;../src/operation/iSTA/source/data/example1&quot;</span>
set_design_workspace <span class="token variable">$work_dir</span>/rpt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="read-the-verilog-file" tabindex="-1"><a class="header-anchor" href="#read-the-verilog-file" aria-hidden="true">#</a> Read the verilog file</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>read_netlist <span class="token variable">$work_dir</span>/example1.v
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="read-the-lib-file" tabindex="-1"><a class="header-anchor" href="#read-the-lib-file" aria-hidden="true">#</a> Read the.lib file</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">set</span> LIB_FILES <span class="token variable">$work_dir</span>/example1_slow.lib
read_liberty <span class="token variable">$LIB_FILES</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="link-the-design-to-the-netlist" tabindex="-1"><a class="header-anchor" href="#link-the-design-to-the-netlist" aria-hidden="true">#</a> Link the design to the netlist</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>link_design <span class="token function">top</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="read-the-sdc-file" tabindex="-1"><a class="header-anchor" href="#read-the-sdc-file" aria-hidden="true">#</a> Read the sdc file</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>read_sdc  <span class="token variable">$work_dir</span>/example1.sdc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="read-the-spef-file" tabindex="-1"><a class="header-anchor" href="#read-the-spef-file" aria-hidden="true">#</a> Read the spef file</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>read_spef <span class="token variable">$work_dir</span>/example1.spef
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="obtain-the-timing-report" tabindex="-1"><a class="header-anchor" href="#obtain-the-timing-report" aria-hidden="true">#</a> Obtain the timing report</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>report_timing
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The timing report is located in the output path of the timing report set in the first step, including</p><ul><li>top.rpt (Reports WNS, TNS and timing paths)</li><li>top.cap (Reports violation capacitance)</li><li>top.fanout (Reports violation fanout)</li><li>top.trans (Reports violation transition time)</li><li>top_hold.skew (Reports clock skew in hold mode)</li><li>top_setup.skew (Reports clock skew in setup mode)</li></ul><h3 id="compiling-ista-ista-is-located-at-bin" tabindex="-1"><a class="header-anchor" href="#compiling-ista-ista-is-located-at-bin" aria-hidden="true">#</a> Compiling iSTA (iSTA is located at: bin/)</h3><h3 id="running-the-tcl-file-using-ista" tabindex="-1"><a class="header-anchor" href="#running-the-tcl-file-using-ista" aria-hidden="true">#</a> Running the tcl file using iSTA</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token builtin class-name">cd</span> bin/
./iSTA run_ista.tcl
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,29),l=[r];function d(o,c){return i(),s("div",null,l)}const m=a(n,[["render",d],["__file","ista.html.vue"]]);export{m as default};
