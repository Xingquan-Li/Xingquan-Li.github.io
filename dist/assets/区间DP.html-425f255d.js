const t=JSON.parse('{"key":"v-87d87d16","path":"/train/eda/algorithm-data/Part_7_algorithm/7_2_dynamic-programing/%E5%8C%BA%E9%97%B4DP.html","title":"7.2.4 区间DP","lang":"zh-CN","frontmatter":{"title":"7.2.4 区间DP","order":4},"headers":[{"level":2,"title":"石子合并","slug":"石子合并","link":"#石子合并","children":[]},{"level":2,"title":"Minimum Cost to Merge Stones","slug":"minimum-cost-to-merge-stones","link":"#minimum-cost-to-merge-stones","children":[]}],"git":{"createdTime":1721213548000,"updatedTime":1721228820000,"contributors":[{"name":"Xingquan-Li","email":"fzulxq@gmail.com","commits":1},{"name":"simintao","email":"simintao@126.com","commits":1}]},"readingTime":{"minutes":7.13,"words":2138},"filePathRelative":"train/eda/algorithm-data/Part_7_algorithm/7_2_dynamic-programing/区间DP.md","localizedDate":"2024年7月17日","excerpt":"<p><strong>区间DP的特征</strong>: 可以两个或多个部分进行整合, 或者反过来；能将问题分解为能两两合并的形式.<br>\\n<strong>区间DP的求解</strong>: 对<strong>整个问题设最优值</strong>，枚举<strong>合并点</strong>，将问题分解为<strong>左右两个部分</strong>，最后合并两个部分的最优值得到原问题的最优值。</p>\\n<p>一般的方法是枚举长度(最外层<code>L</code>, <code>0 &lt; L &lt; N</code>), 枚举左端点(第二层<code>i</code>, <code>0 &lt; i &lt; N-L</code>), 以此可确定右端点(<code>j = i + L</code>), 枚举合并点 (<code>i &lt;= t &lt; j</code>).<br>\\n什么是枚举合并点? 好比我要在一块蛋糕的第<code>i</code>厘米到第<code>j</code>厘米直接切一刀, 可以切在哪里? 在<code>i~j</code>之间下的那一刀就是合并点, 需要一个loop来枚举.</p>","copyright":{"author":"iEDA","license":"GPL-3.0"}}');export{t as data};
