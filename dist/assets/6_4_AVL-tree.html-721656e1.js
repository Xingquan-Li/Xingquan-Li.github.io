const t=JSON.parse('{"key":"v-1d6b022e","path":"/train/eda/algorithm-data/Part_6-data_structure/6_4_AVL-tree.html","title":"6.4 AVL树","lang":"zh-CN","frontmatter":{"title":"6.4 AVL树","order":4},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"树结点类、平衡二叉树类","slug":"树结点类、平衡二叉树类","link":"#树结点类、平衡二叉树类","children":[]},{"level":2,"title":"插入操作","slug":"插入操作","link":"#插入操作","children":[]},{"level":2,"title":"平衡操作","slug":"平衡操作","link":"#平衡操作","children":[]},{"level":2,"title":"旋转操作","slug":"旋转操作","link":"#旋转操作","children":[]},{"level":2,"title":"整体实现代码以及测试","slug":"整体实现代码以及测试","link":"#整体实现代码以及测试","children":[]}],"git":{"createdTime":1721213548000,"updatedTime":1721213548000,"contributors":[{"name":"Xingquan-Li","email":"fzulxq@gmail.com","commits":1}]},"readingTime":{"minutes":7.52,"words":2256},"filePathRelative":"train/eda/algorithm-data/Part_6-data_structure/6_4_AVL-tree.md","localizedDate":"2024年7月17日","excerpt":"<h1> AVL树</h1>\\n<h2> 前言</h2>\\n<blockquote>\\n<p>AVL树：是最早被发明的自平衡二叉查找树。在AVL树中，<strong>任一节点对应的两棵子树的最大高度差为1</strong>，因此它也被称为<strong>高度平衡树</strong>。查找、插入和删除在平均和最坏情况下的时间复杂度都是<img src=\\"https://math.jianshu.com/math?formula={\\\\displaystyle O(\\\\log {n})}\\" alt=\\"{isplaystyle O(og {n})}\\">。增加和删除元素的操作则可能需要借由一次或多次树旋转，以实现树的重新平衡。</p>\\n</blockquote>","copyright":{"author":"iEDA","license":"GPL-3.0"}}');export{t as data};
