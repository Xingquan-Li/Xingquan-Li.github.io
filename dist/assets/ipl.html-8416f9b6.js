import{_ as e}from"./iPL-f9376711.js";import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as o,b as d,f as r,d as t,e as l}from"./app-1ed3f6c2.js";const a={},c=r('<h1 id="ipl布局工具介绍" tabindex="-1"><a class="header-anchor" href="#ipl布局工具介绍" aria-hidden="true">#</a> iPL布局工具介绍</h1><h2 id="_1-背景简介" tabindex="-1"><a class="header-anchor" href="#_1-背景简介" aria-hidden="true">#</a> 1 背景简介</h2><p>1、布局问题：给定有连接线关系（线网）的单元集合以及布局区域，布局对单元进行放置。一般布局目标是最小化线网总线长/时序/功耗，要求单元满足合法性（在布局区域内、对齐Row/Site、单元相互不重叠等）的规定。</p><ul><li>线网：单条线网可连接多个Pin点（Pin点位置在单元上或者是在IO处）；线网走线方向只有横纵方向。</li><li>单元：形状通常是矩形。单元类型有宏单元、标准单元（时序单元、逻辑单元）等；单元状态有已固定、待放置等。</li></ul><img src="'+e+'"><p>图1 iPL主要流程图</p><h2 id="_2-主要实现" tabindex="-1"><a class="header-anchor" href="#_2-主要实现" aria-hidden="true">#</a> 2 主要实现</h2><h3 id="_2-1-功能实现" tabindex="-1"><a class="header-anchor" href="#_2-1-功能实现" aria-hidden="true">#</a> 2.1 功能实现</h3>',8),s=t("p",null,"图5 iPL中实现的主要布局流程，一步到位求解大规模布局问题是NP难的，因此一般划分为三个阶段：全局布局、合法化和详细布局。",-1),_=t("ul",null,[t("li",null,[l("Place std cell into proper location "),t("ul",null,[t("li",null,"satisfy layer poly, well, contact, and metal 1 design rule"),t("li",null,"optimize wirelength, timing, congestion")])]),t("li",null,"Place macro cell location automatically"),t("li",null,"Incremental placement"),t("li",null,"Timing-driven placement (coming soon)"),t("li",null,"Congestion-driven placement (coming soon)")],-1),p=r('<p>图6 布局示意图</p><h3 id="_2-2-工具api实现" tabindex="-1"><a class="header-anchor" href="#_2-2-工具api实现" aria-hidden="true">#</a> 2.2 工具API实现</h3><table><thead><tr><th>方法名</th><th>子方法</th><th>类型</th><th>参数列表</th><th>返回值</th><th>方法描述</th></tr></thead><tbody><tr><td>initAPI</td><td>*</td><td>action</td><td>pl_json_path, idb_builder</td><td>self</td><td>初始化iPL</td></tr><tr><td>runFlow</td><td>runGP</td><td>action</td><td>void</td><td>self</td><td>运行全局布局</td></tr><tr><td>runFlow</td><td>runBufferInsertion</td><td>action</td><td>void</td><td>self</td><td>运行Buffer插入</td></tr><tr><td>runFlow</td><td>runLG</td><td>action</td><td>void</td><td>self</td><td>运行合法化</td></tr><tr><td>runFlow</td><td>runDP</td><td>action</td><td>void</td><td>self</td><td>运行详细布局</td></tr><tr><td>runFlow</td><td>writeBackSourceDataBase</td><td>action</td><td>void</td><td>self</td><td>布局数据写回数据源</td></tr><tr><td>runIncrLG</td><td>*</td><td>action</td><td>inst_list</td><td>self</td><td>运行增量式合法化</td></tr><tr><td>updatePlacerDB</td><td>*</td><td>action</td><td>void/inst_list</td><td>self</td><td>从数据源更新（指定）数据</td></tr><tr><td>obtainAvailable WhiteSpaceList</td><td>*</td><td>action</td><td>row_range,site_range</td><td>rectanglelist</td><td>获取指定区域下的可用布局空间（供插入单元使用）</td></tr><tr><td>checkLegality</td><td>*</td><td>accessor</td><td>void</td><td>bool</td><td>检查当前布局结果的合法性</td></tr><tr><td>isSTAStarted</td><td>*</td><td>accessor</td><td>void</td><td>bool</td><td>检查是否已启动STA</td></tr><tr><td>isPlacerDBStarted</td><td>*</td><td>accessor</td><td>void</td><td>bool</td><td>检查是否已初始化PlacerDB</td></tr><tr><td>isAbucasLGStarted</td><td>*</td><td>accessor</td><td>void</td><td>bool</td><td>检查是否已启动Abucas合法器</td></tr><tr><td>reportPLInfo</td><td>reportHPWLInfo</td><td>accessor</td><td>feed</td><td>self</td><td>报告HPWL信息</td></tr><tr><td>reportPLInfo</td><td>reportSTWLInfo</td><td>accessor</td><td>feed</td><td>self</td><td>报告STWL信息</td></tr><tr><td>reportPLInfo</td><td>reportLongNetInfo</td><td>accessor</td><td>feed</td><td>self</td><td>报告长线网信息</td></tr><tr><td>reportPLInfo</td><td>reportLayoutInfo</td><td>accessor</td><td>feed</td><td>self</td><td>报告版图违例信息</td></tr><tr><td>reportPLInfo</td><td>reportPeakBinDensity</td><td>accessor</td><td>feed</td><td>self</td><td>报告Bin区域的峰值密度</td></tr><tr><td>reportPLInfo</td><td>reportTimingInfo</td><td>accessor</td><td>feed</td><td>self</td><td>报告布局时序信息</td></tr><tr><td>reportPLInfo</td><td>reportCongestionInfo</td><td>accessor</td><td>feed</td><td>self</td><td>报告布局拥塞信息</td></tr><tr><td>obtainTimingInfo</td><td>obtainPinEarly(Late)Slack</td><td>action</td><td>pin_name</td><td>value</td><td>获取Pin上的Slack信息</td></tr><tr><td>obtainTimingInfo</td><td>obtainPinEarly(Late)ArrivalTime</td><td>action</td><td>pin_name</td><td>value</td><td>获取Pin上的ArrivalTime信息</td></tr><tr><td>obtainTimingInfo</td><td>obtainPinEarly(Late)RequiredTime</td><td>action</td><td>pin_name</td><td>value</td><td>获取Pin上的RequiredTime信息</td></tr><tr><td>obtainTimingInfo</td><td>obtainWNS/TNS</td><td>action</td><td>clk_name</td><td>value</td><td>获取WNS/TNS信息</td></tr><tr><td>obtainTimingInfo</td><td>updateTiming</td><td>action</td><td>void</td><td>self</td><td>更新时序评估</td></tr><tr><td>obtainCongesionInfo</td><td>obtainPinDens</td><td>action</td><td>void</td><td>value</td><td>获取Pin Density信息</td></tr><tr><td>obtainCongesionInfo</td><td>obtainNetCong</td><td>action</td><td>rudy_type</td><td>value</td><td>获取线网拥塞信息</td></tr><tr><td>obtainCongesionInfo</td><td>evalGRCong</td><td>action</td><td>void</td><td>value</td><td>更新拥塞评估</td></tr></tbody></table><h2 id="_3-关键技术" tabindex="-1"><a class="header-anchor" href="#_3-关键技术" aria-hidden="true">#</a> 3 关键技术</h2><h3 id="_3-1-模块设计" tabindex="-1"><a class="header-anchor" href="#_3-1-模块设计" aria-hidden="true">#</a> 3.1 模块设计</h3>',5),h=r('<p>图7 iPL模块划分</p><ul><li>PlacerDB模块：封装并维护布局所需的版图数据（layout）和设计数据（Design）</li><li>Operator模块：提取布局数据进行操作，期间调用solver模块进行求解，evaluator模块评估指标，checker模块检查布局结果</li><li>Solver模块：集合一些成熟的求解工具辅助布局</li><li>Checker模块：对当前布局进行违例检查、功能检测、报告输出Evaluator模块：评估当前布局指标</li><li>Wrapper模块：从数据源读取布局数据，布局结果写回数据源</li><li>API：iPL与外部的交互接口</li></ul><h3 id="_3-2-可布线性方案" tabindex="-1"><a class="header-anchor" href="#_3-2-可布线性方案" aria-hidden="true">#</a> 3.2 可布线性方案</h3><ul><li>线长梯度：WA 线长光滑模型</li><li>密度梯度：e-Density 静电场模型</li><li>优化算法：Nesterov梯度下降算法</li><li>拥塞评估方法(由iEDA evaluator提供API)： <ul><li>LUT-RUDY（Look Up Table-based RUDY）</li><li>Early-GR</li></ul></li><li>细粒度单元膨胀： <ul><li>选择峰值拥塞网格的单元进行膨胀</li><li>H/V双方向独立膨胀</li><li>动态膨胀率调整</li><li>超线性膨胀指数修正</li></ul></li></ul><p>当全局布局所有单元足够散开(density overflow &lt; 0.2)，开始进行可布线性评估和优化</p>',5),u=r('<p>图8 iPL可布线性方案流程</p><h2 id="_4-输入输出" tabindex="-1"><a class="header-anchor" href="#_4-输入输出" aria-hidden="true">#</a> 4 输入输出</h2><p><strong>输入</strong></p><ul><li>网表优化def文件 ./result/iTO_fix_fanout_result.def</li></ul><p><strong>输出</strong></p><ul><li>./result/iPL_result.def</li><li>./result/iPL_result.v</li></ul><p><strong>评测和报告</strong></p><ul><li>./result/report/pl_db.rpt</li></ul><p>iPL工具的中间报告默认存放在目录：<code>./scripts/design/sky130_gcd/result/pl/</code></p>',9),g=t("p",null,"图9 当前的布局结果是否存在违例的检查，详细违例情况在同级目录下文件violation_record.txt",-1),f=r(`<p>图10 布局优化的线长指标报告，长线网的详细报告在同级目录下文件wirelength_record.txt；单元分布的密度信息，详细报告在同级目录下文件density_record.txt；布局结果的时序信息，详细报告在同级目录下文件timing_record.txt；布局结果的可布线性信息，详细报告在同级目录下文件congestion_record.txt</p><ul><li><p>report/violation_record.txt ：布局违例的单元</p></li><li><p>report/wirelength_record.txt ：布局的HPWL线长、STWL线长以及长线线长统计</p></li><li><p>report/density_record.txt ：布局的峰值bin密度</p></li><li><p>report/timing_record.txt ：布局的时序信息（wns、tns），调用Flute进行简易绕线</p></li><li><p>report/congestion_record.txt：布局的可布线性信息</p></li></ul><h2 id="_5-参数说明" tabindex="-1"><a class="header-anchor" href="#_5-参数说明" aria-hidden="true">#</a> 5 <strong>参数说明</strong></h2><p>参考iEDA_config/pl_default_config.json: <code>./scripts/design/sky130_gcd/iEDA_config/pl_default_config.json</code></p><table><thead><tr><th>参数名称</th><th>功能说明</th><th>参数范围</th><th>默认值</th></tr></thead><tbody><tr><td>is_max_length_opt</td><td>是否开启最大线长优化</td><td>[0,1]</td><td>0</td></tr><tr><td>max_length_constraint</td><td>指定最大线长</td><td>[0-1000000]</td><td>1000000</td></tr><tr><td>is_timing_aware_mode</td><td>是否开启时序模式</td><td>[0,1]</td><td>0</td></tr><tr><td>ignore_net_degree</td><td>忽略超过指定pin个数的线网</td><td>[10-10000]</td><td>100</td></tr><tr><td>num_threads</td><td>指定的CPU线程数</td><td>[1-64]</td><td>8</td></tr><tr><td>[GP-Wirelength] init_wirelength_coef</td><td>设置初始线长系数</td><td>[0.0-1.0]</td><td>0.25</td></tr><tr><td>[GP-Wirelength] reference_hpwl</td><td>调整密度惩罚的参考线长</td><td>[100-1000000]</td><td>446000000</td></tr><tr><td>[GP-Wirelength] min_wirelength_force_bar</td><td>控制线长边界</td><td>[-1000-0]</td><td>-300</td></tr><tr><td>[GP-Density] target_density</td><td>指定的目标密度</td><td>[0.0-1.0]</td><td>0.8</td></tr><tr><td>[GP-Density] bin_cnt_x</td><td>指定水平方向上Bin的个数</td><td>[16,32,64,128,256,512,1024]</td><td>512</td></tr><tr><td>[GP-Density] bin_cnt_y</td><td>指定垂直方向上Bin的个数</td><td>[16,32,64,128,256,512,1024]</td><td>512</td></tr><tr><td>[GP-Nesterov] max_iter</td><td>指定最大的迭代次数</td><td>[50-2000]</td><td>2000</td></tr><tr><td>[GP-Nesterov] max_backtrack</td><td>指定最大的回溯次数</td><td>[0-100]</td><td>10</td></tr><tr><td>[GP-Nesterov] init_density_penalty</td><td>指定初始状态的密度惩罚</td><td>[0.0-1.0]</td><td>0.00008</td></tr><tr><td>[GP-Nesterov] target_overflow</td><td>指定目标的溢出值</td><td>[0.0-1.0]</td><td>0.1</td></tr><tr><td>[GP-Nesterov] initial_prev_coordi_update_coef</td><td>初始扰动坐标时的系数</td><td>[10-10000]</td><td>100</td></tr><tr><td>[GP-Nesterov] min_precondition</td><td>设置precondition的最小值</td><td>[1-100]</td><td>1</td></tr><tr><td>[GP-Nesterov] min_phi_coef</td><td>设置最小的phi参数</td><td>[0.0-1.0]</td><td>0.95</td></tr><tr><td>[GP-Nesterov] max_phi_coef</td><td>设置最大的phi参数</td><td>[0.0-1.0]</td><td>1.05</td></tr><tr><td>[BUFFER] max_buffer_num</td><td>指定限制最大buffer插入个数</td><td>[0-1000000]</td><td>35000</td></tr><tr><td>[BUFFER] buffer_type</td><td>指定可插入的buffer类型名字</td><td>工艺相关</td><td>列表[...,...]</td></tr><tr><td>[LG] max_displacement</td><td>指定单元的最大移动量</td><td>[10000-1000000]</td><td>50000</td></tr><tr><td>[LG] global_right_padding</td><td>指定单元间的间距（以Site为单位）</td><td>[0,1,2,3,4...]</td><td>1</td></tr><tr><td>[DP] max_displacement</td><td>指定单元的最大移动量</td><td>[10000-1000000]</td><td>50000</td></tr><tr><td>[DP] global_right_padding</td><td>指定单元间的间距（以Site为单位）</td><td>[0,1,2,3,4...]</td><td>1</td></tr><tr><td>[Filler] first_iter</td><td>指定第一轮迭代使用的Filler</td><td>工艺相关</td><td>列表[...,...]</td></tr><tr><td>[Filler] second_iter</td><td>指定第二轮迭代使用的Filler</td><td>工艺相关</td><td>列表[...,...]</td></tr><tr><td>[Filler] min_filler_width</td><td>指定Filler的最小宽度（以Site为单位）</td><td>工艺相关</td><td>1</td></tr><tr><td>[MP] fixed_macro</td><td>指定固定的宏单元 (string macro_name)</td><td>设计相关</td><td>列表[...,...]</td></tr><tr><td>[MP] fixed_macro_coordinate</td><td>指定固定宏单元的位置坐标（int location_x, int location_y）</td><td>设计相关</td><td>列表[...,...]</td></tr><tr><td>[MP] blockage</td><td>指定宏单元阻塞矩形区域，宏单元应该避免摆放在该区域（int left_bottom_x, int left_bottom_y, int right_top_x, int right_top_y)</td><td>设计相关</td><td>列表[...,...]</td></tr><tr><td>[MP] guidance_macro</td><td>指定指导摆放宏单元，每个宏单元可以设置期望摆放的区域 (string macro_name)</td><td>设计相关</td><td>列表[...,...]</td></tr><tr><td>[MP] guidance</td><td>指定对应宏单元的指导摆放区域（int left_bottom_x, int left_bottom_y, int right_top_x, int right_top_y）</td><td>设计相关</td><td>列表[...,...]</td></tr><tr><td>[MP] solution_type</td><td>指定解的表示方式</td><td>[&quot;BStarTree&quot;,&quot;SequencePair&quot;]</td><td>&quot;BStarTree&quot;</td></tr><tr><td>[MP] perturb_per_step</td><td>指定模拟退火每步扰动次数</td><td>[10-1000]</td><td>100</td></tr><tr><td>[MP] cool_rate</td><td>指定模拟退火温度冷却率</td><td>[0.0-1.0]</td><td>0.92</td></tr><tr><td>[MP] parts</td><td>指定标准单元划分数（int)</td><td>[10-100]</td><td>66</td></tr><tr><td>[MP] ufactor</td><td>指定标准单元划分不平衡值 (int)</td><td>[10-1000]</td><td>100</td></tr><tr><td>[MP] new_macro_density</td><td>指定虚拟宏单元密度</td><td>[0.0-1.0]</td><td>0.6</td></tr><tr><td>[MP] halo_x</td><td>指定宏单元的halo（横向）</td><td>[0-1000000]</td><td>0</td></tr><tr><td>[MP] halo_y</td><td>指定宏单元的halo（纵向）</td><td>[0-1000000]</td><td>0</td></tr><tr><td>[MP] output_path</td><td>指定输出文件路径</td><td></td><td>&quot;./result/pl&quot;</td></tr></tbody></table><h3 id="支持功能" tabindex="-1"><a class="header-anchor" href="#支持功能" aria-hidden="true">#</a> 支持功能</h3><ul><li>支持标准单元的全局布局、合法化、详细布局；</li><li>支持对布局结果进行违例检查、报告布局阶段线长、密度、时序、拥塞</li><li>支持在布局阶段插入buffer进行长线优化；</li><li>支持增量式合法化；</li><li>时序优化与拥塞优化进一步完善中；</li></ul><hr><blockquote><h2 id="ipl使用示例" tabindex="-1"><a class="header-anchor" href="#ipl使用示例" aria-hidden="true">#</a> iPL使用示例</h2></blockquote><h3 id="通过tcl启动" tabindex="-1"><a class="header-anchor" href="#通过tcl启动" aria-hidden="true">#</a> 通过tcl启动</h3><p>参考iPL_script/run_iPL.tcl： <code>&lt;ieda_path&gt;/scripts/design/sky130_gcd/script/iPL_script/run_iPL.tcl</code></p><p>iPL支持使用的tcl命令</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>run_placer -conifg &lt;config_path&gt; // 完整运行整个iPL
run_filler -conifg &lt;config_path&gt; // 对布局的空白区域进行单元填充
run_incremental_flow -conifg &lt;config_path&gt; // 对改变单元位置的结果进行重新合法化
run_incremental_lg // 进行增量式合法化，需保证iPL已运行
placer_check_legality // 检查当前布局的合法性
placer_report // 对当前布局的状态进行report
init_pl -conifg &lt;config_path&gt; // 对布局器进行初始化
destroy_pl // 销毁布局器
placer_run_mp // 进行宏单元布局
placer_run_gp // 进行标准单元全局布局
placer_run_lg // 进行标准单元合法化
placer_run_dp // 进行标准单元详细布局
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="config配置文件" tabindex="-1"><a class="header-anchor" href="#config配置文件" aria-hidden="true">#</a> Config配置文件</h3><p>参考iEDA_config/pl_default_config.json: <code>&lt;ieda_path&gt;/scripts/design/sky130_gcd/iEDA_config/pl_default_config.json</code></p><table><thead><tr><th>JSON参数</th><th>功能说明</th><th>参数范围</th><th>默认值</th></tr></thead><tbody><tr><td>is_max_length_opt</td><td>是否开启最大线长优化</td><td>[0,1]</td><td>0</td></tr><tr><td>max_length_constraint</td><td>指定最大线长</td><td>[0-1000000]</td><td>1000000</td></tr><tr><td>is_timing_effort</td><td>是否开启时序优化模式</td><td>[0,1]</td><td>0</td></tr><tr><td>is_congestion_effort</td><td>是否开启可布线性优化模式</td><td></td><td></td></tr><tr><td>ignore_net_degree</td><td>忽略超过指定pin个数的线网</td><td>[10-10000]</td><td>100</td></tr><tr><td>num_threads</td><td>指定的CPU线程数</td><td>[1-64]</td><td>8</td></tr><tr><td>[GP-Wirelength] init_wirelength_coef</td><td>设置初始线长系数</td><td>[0.0-1.0]</td><td>0.25</td></tr><tr><td>[GP-Wirelength] reference_hpwl</td><td>调整密度惩罚的参考线长</td><td>[100-1000000]</td><td>446000000</td></tr><tr><td>[GP-Wirelength] min_wirelength_force_bar</td><td>控制线长边界</td><td>[-1000-0]</td><td>-300</td></tr><tr><td>[GP-Density] target_density</td><td>指定的目标密度</td><td>[0.0-1.0]</td><td>0.8</td></tr><tr><td>[GP-Density] bin_cnt_x</td><td>指定水平方向上Bin的个数</td><td>[16,32,64,128,256,512,1024]</td><td>512</td></tr><tr><td>[GP-Density] bin_cnt_y</td><td>指定垂直方向上Bin的个数</td><td>[16,32,64,128,256,512,1024]</td><td>512</td></tr><tr><td>[GP-Nesterov] max_iter</td><td>指定最大的迭代次数</td><td>[50-2000]</td><td>2000</td></tr><tr><td>[GP-Nesterov] max_backtrack</td><td>指定最大的回溯次数</td><td>[0-100]</td><td>10</td></tr><tr><td>[GP-Nesterov] init_density_penalty</td><td>指定初始状态的密度惩罚</td><td>[0.0-1.0]</td><td>0.00008</td></tr><tr><td>[GP-Nesterov] target_overflow</td><td>指定目标的溢出值</td><td>[0.0-1.0]</td><td>0.1</td></tr><tr><td>[GP-Nesterov] initial_prev_coordi_update_coef</td><td>初始扰动坐标时的系数</td><td>[10-10000]</td><td>100</td></tr><tr><td>[GP-Nesterov] min_precondition</td><td>设置precondition的最小值</td><td>[1-100]</td><td>1</td></tr><tr><td>[GP-Nesterov] min_phi_coef</td><td>设置最小的phi参数</td><td>[0.0-1.0]</td><td>0.95</td></tr><tr><td>[GP-Nesterov] max_phi_coef</td><td>设置最大的phi参数</td><td>[0.0-1.0]</td><td>1.05</td></tr><tr><td>[BUFFER] max_buffer_num</td><td>指定限制最大buffer插入个数</td><td>[0-1000000]</td><td>35000</td></tr><tr><td>[BUFFER] buffer_type</td><td>指定可插入的buffer类型名字</td><td>工艺相关</td><td>列表[...,...]</td></tr><tr><td>[LG] max_displacement</td><td>指定单元的最大移动量</td><td>[10000-1000000]</td><td>50000</td></tr><tr><td>[LG] global_right_padding</td><td>指定单元间的间距（以Site为单位）</td><td>[0,1,2,3,4...]</td><td>1</td></tr><tr><td>[DP] max_displacement</td><td>指定单元的最大移动量</td><td>[10000-1000000]</td><td>50000</td></tr><tr><td>[DP] global_right_padding</td><td>指定单元间的间距（以Site为单位）</td><td>[0,1,2,3,4...]</td><td>1</td></tr><tr><td>[Filler] first_iter</td><td>指定第一轮迭代使用的Filler</td><td>工艺相关</td><td>列表[...,...]</td></tr><tr><td>[Filler] second_iter</td><td>指定第二轮迭代使用的Filler</td><td>工艺相关</td><td>列表[...,...]</td></tr><tr><td>[Filler] min_filler_width</td><td>指定Filler的最小宽度（以Site为单位）</td><td>工艺相关</td><td>1</td></tr><tr><td>[MP] fixed_macro</td><td>指定固定的宏单元 (string macro_name)</td><td>设计相关</td><td>列表[...,...]</td></tr><tr><td>[MP] fixed_macro_coordinate</td><td>指定固定宏单元的位置坐标（int location_x, int location_y）</td><td>设计相关</td><td>列表[...,...]</td></tr><tr><td>[MP] blockage</td><td>指定宏单元阻塞矩形区域，宏单元应该避免摆放在该区域（int left_bottom_x, int left_bottom_y, int right_top_x, int right_top_y)</td><td>设计相关</td><td>列表[...,...]</td></tr><tr><td>[MP] guidance_macro</td><td>指定指导摆放宏单元，每个宏单元可以设置期望摆放的区域 (string macro_name)</td><td>设计相关</td><td>列表[...,...]</td></tr><tr><td>[MP] guidance</td><td>指定对应宏单元的指导摆放区域（int left_bottom_x, int left_bottom_y, int right_top_x, int right_top_y）</td><td>设计相关</td><td>列表[...,...]</td></tr><tr><td>[MP] solution_type</td><td>指定解的表示方式</td><td>[&quot;BStarTree&quot;,&quot;SequencePair&quot;]</td><td>&quot;BStarTree&quot;</td></tr><tr><td>[MP] perturb_per_step</td><td>指定模拟退火每步扰动次数</td><td>[10-1000]</td><td>100</td></tr><tr><td>[MP] cool_rate</td><td>指定模拟退火温度冷却率</td><td>[0.0-1.0]</td><td>0.92</td></tr><tr><td>[MP] parts</td><td>指定标准单元划分数（int)</td><td>[10-100]</td><td>66</td></tr><tr><td>[MP] ufactor</td><td>指定标准单元划分不平衡值 (int)</td><td>[10-1000]</td><td>100</td></tr><tr><td>[MP] new_macro_density</td><td>指定虚拟宏单元密度</td><td>[0.0-1.0]</td><td>0.6</td></tr><tr><td>[MP] halo_x</td><td>指定宏单元的halo（横向）</td><td>[0-1000000]</td><td>0</td></tr><tr><td>[MP] halo_y</td><td>指定宏单元的halo（纵向）</td><td>[0-1000000]</td><td>0</td></tr></tbody></table><h3 id="运行的log、report" tabindex="-1"><a class="header-anchor" href="#运行的log、report" aria-hidden="true">#</a> 运行的Log、Report</h3><p>默认存放在目录：<code>&lt;ieda_path&gt;/scripts/design/sky130_gcd/result/pl/</code></p><ul><li>report/violation_record.txt ：布局违例的单元</li><li>report/wirelength_record.txt ：布局的HPWL线长、STWL线长以及长线线长统计</li><li>report/density_record.txt ：布局的峰值bin密度</li><li>report/timing_record.txt ：布局的时序信息（wns、tns），调用Flute进行简易绕线</li></ul>`,19);function m(P,b){return n(),o("div",null,[c,d(' <img src="@source/tools/img/iPL/iPL_5.png"> '),s,_,d(' <img src="@source/tools/img/iPL/iPL_4.png"> '),p,d(' <img src="@source/tools/img/iPL/iPL_9.png"> '),h,d(' <img src="@source/tools/img/iPL/iPL_10.png"> '),u,d(' <img src="@source/tools/img/iPL/iPL_2.png"> '),g,d(' <img src="@source/tools/img/iPL/iPL_3.png"> '),f])}const L=i(a,[["render",m],["__file","ipl.html.vue"]]);export{L as default};
