import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as r,b as i,f as t}from"./app-1ed3f6c2.js";const l={},p=t('<h2 id="fp-tcl命令使用手册" tabindex="-1"><a class="header-anchor" href="#fp-tcl命令使用手册" aria-hidden="true">#</a> <strong>FP_TCL命令使用手册</strong></h2><p><strong>Dependencies</strong></p><ul><li>sudo apt-get install libunwind-dev</li><li>sudo apt-get install libspdlog-dev(env : ubuntu20.04)</li><li>sudo apt-get install boost 1.71</li><li>sudo apt-get install eigen</li></ul><p><strong>Build</strong></p><p>git clone --recursive<br> cd iEDA<br> mkdir build<br> cd build<br> cmake ..<br> make</p><p><strong>Run</strong></p><p>cd iEDA/bin</p><p>./FP gtest.tcl</p><p><strong>工具更新</strong></p><p>cd iEDA</p><p>git pull</p><p>rm -rf build</p><p>mkdir build</p><p>cd build</p><p>cmake ..</p><p>make</p><p><strong>#1.init_floorplan</strong></p><ul><li>-die_area die的面积，一个字符串，以空格区分每个值，此处的值为没有乘DBU的</li><li>-core_area core的面积，一个字符串，以空格区分每个值，此处的值为没有乘DBU的</li><li>-core_site core的site选取</li><li>-io_site 针对110工艺，此处为<strong>可选参数</strong>，会默认选择“IOSite”</li></ul><p><strong>##示例：</strong></p><p>set DIE_AREA &quot;0.0 0.0 2843 2843&quot;</p><p>set CORE_AREA &quot;150 150 2693 2693&quot;</p><p>set PLACE_SITE HD_CoreSite</p><p>set IO_SITE IOSite</p><p>init_floorplan \\</p><p>​ -die_area $DIE_AREA \\</p><p>​ -core_area $CORE_AREA \\</p><p>​ -core_site $PLACE_SITE \\</p><p>​ -io_site $IO_SITE</p><p><strong>#2.placeInst</strong></p><p>已测试的功能包括：</p><ol><li>摆放IOCELL</li><li>摆放电源CELL</li><li>摆放IOFILLER</li><li>摆放CORNER</li></ol><p>在摆放以上四种时，会进行摆放检查，规则是是否按照IOSite摆放以及是否在DIE BOUNDARY上</p><p>5.摆放标准单元</p><ul><li>-inst_name instance的名字</li><li>-llx 左下角横坐标，此时的数值是绝对坐标，即需设置乘过DBU的值</li><li>-lly 左下角纵坐标</li><li>-orient 朝向，可使用（N，S，W，E）或（R0，R180，R90，R270）</li><li>-cellmaster cell的种类</li></ul><p><strong>##示例：</strong></p><p>placeInst <br> -inst_name u0_clk <br> -llx 0 <br> -lly 2510940 <br> -orient E <br> -cellmaster PX1W</p><p><strong>#3.placePort</strong></p><p>该命令只针对与IOCELL连接的IOPIN的port生成，电源CELL的port不使用该接口</p><ul><li>-pin_name iopin名字<br> ​- -offset_x 相对于所连接的IOCELL的左下角坐标的偏移量，此处需设置绝对长度，即乘过DBU之后的值<br> ​- -offset_y 相对于所连接的IOCELL的左下角坐标的偏移量，此处需设置绝对长度，即乘过DBU之后的值<br> ​- -width 矩形宽度，相对于所连接的IOCELL的左下角坐标的偏移量，此处需设置绝对长度，即乘过DBU之后的值<br> ​- -height 矩形高度，相对于所连接的IOCELL的左下角坐标的偏移量，此处需设置绝对长度，即乘过DBU之后的值<br> ​- -layer 所在的层的名字</li></ul><p><strong>##示例：</strong></p><p>placePort <br> -pin_name osc_in_pad <br> -offset_x 9000 <br> -offset_y 71500 <br> -width 58000 <br> -height 58000 <br> -layer ALPA</p><p><strong>#4.placeIoFiller</strong></p><p>摆放IOFiller，支持四个边自动填充</p><p>必选参数：-filler_types IOFiller的种类</p><p>可选参数：</p><ul><li>-prefix 生成的filler的名字的前缀，默认为IOFill</li><li>-edge 设定在哪一个边填充，不设置则为全局填充</li><li>-begin_pos 设定在某边某一个线段内进行填充，如果不设置，则默认该边全部填充</li><li>-end_pos 此处begin与pos的值为double，为没有乘DBU之前的值，与init类似</li></ul><p><strong>##示例：</strong></p><p>placeIoFiller <br> -filler_types &quot;PFILL50W PFILL20W PFILL10W PFILL5W PFILL2W PFILL01W PFILL001W&quot;</p><p>​ #-prefix</p><p>​ #-edge</p><p>​ #-begin_pos</p><p>​ #-end_pos</p><p><strong>#5.tapcell</strong></p><p>放置tapcell以及endcap</p><ul><li>-tapcell 设置tapcell的种类</li><li>-distance 32.5 设置tapcell的间距，此处为没有乘DBU的值</li><li>-endcap endcap的种类</li></ul><p><strong>##示例：</strong></p><p>tapcell <br> -tapcell LVT_FILLTIEHD <br> -distance 32.5 <br> -endcap LVT_F_FILLHD1</p><p><strong>#6.global_net_connect</strong></p><p>创建电源net</p><ul><li>-net_name 电源网络名称</li><li>-instance_pin_name instance连接该网络的pin的名称。当前还不支持指定某些instance的该pin连接到该电源网络，默认为全局含有该pin的instance都连接到该网络</li><li>-is_power 需设置为1或0： 1代表use power，0代表use ground</li></ul><p><strong>##示例：</strong></p><p>global_net_connect <br> -net_name VDD <br> -instance_pin_name VDD <br> -is_power 1</p><p>global_net_connect <br> -net_name VDD <br> -instance_pin_name VDDIO <br> -is_power 1</p><p>global_net_connect <br> -net_name VSS <br> -instance_pin_name VSS <br> -is_power 0</p><p><strong>#7.add_pdn_io</strong></p><p>为电源NET添加IOPIN</p><ul><li>-net_name 电源网络名称</li><li>-direction 参数（INPUT、OUTPUT、INOUT、FEEDTHRU、OUTTRI），pin的数据direction</li><li>-pin_name 可选参数，默认为电源网络名称</li></ul><p><strong>##示例：</strong></p><p>add_pdn_io <br> -net_name VDD <br> -direction INOUT</p><p>​ #-pin_name VDD</p><p><strong>#8.place_pdn_Port</strong></p><p>为电源网络的IOPIN添加PORT</p><ul><li>-pin_name iopin名字</li><li>-io_cell_name io io cell的名字</li><li>-offset_x 相对io cell的port矩形的左下角坐标</li><li>-offset_y 相对io cell的port矩形的左下角坐标</li><li>-width 矩形宽度</li><li>-height 矩形高度</li><li>-layer port所属绕线层</li></ul><p><strong>##示例：</strong></p><p>place_pdn_Port <br> -pin_name VDD <br> -io_cell_name xxx<br> -offset_x 10 <br> -offset_y 10 <br> -width 100 <br> -height 100 <br> -layer ALPA</p><p>place_pdn_Port <br> -pin_name VDD <br> -io_cell_name xxx<br> -offset_x 20 <br> -offset_y 20 <br> -width 200 <br> -height 200 <br> -layer ALPA 这两个命令可以为VDD pin添加两个port</p>',76),o=t("<p><strong>#9.create_grid</strong></p><p>生成标准单元供电线，会生成绕线信息</p><ul><li>-layer_name 生成电源网格的层</li><li>-net_name_power power net name</li><li>-net_name_ground ground net name</li><li>-width 线宽。是没有乘DBU的数值</li><li>-offset 相对于core边界的偏移量，建议设置为0，仅测试过偏移为0的情况。是没有乘DBU的数值</li></ul><p><strong>##示例：</strong></p><p>create_grid <br> -layer_name &quot;METAL1&quot; <br> -net_name_power VDD <br> -net_name_ground VSS <br> -width 0.24 <br> -offset 0</p><p><strong>#10.create_stripe</strong></p><p>生成标准单元条形电源线</p><ul><li>-layer_name 生成电源线的层</li><li>-net_name_power power net name</li><li>-net_name_ground ground net name</li><li>-width 线宽。是没有乘DBU的数值</li><li>-pitch 同类型电源线的间距。对于标准单元来说，同层的power线与ground线间距为0.5*pitch</li><li>-offset 相对于core边界的偏移量。是没有乘DBU的数值</li></ul><p><strong>##示例：</strong></p><p>create_stripe <br> -layer_name &quot;METAL5&quot; <br> -net_name_power VDD <br> -net_name_ground VSS <br> -width 1.64 <br> -pitch 13.12 <br> -offset 3.895</p><p><strong>#11.connect_two_layer</strong></p><p>连接指定的两层的电源线</p><ul><li>-layers ：可以一对一对的输入，也可以将全部需要连接的层信息一起输入</li></ul><p><strong>##示例：</strong></p><p>set connect1 &quot;METAL1 METAL4&quot; <br> set connect2 &quot;METAL4 METAL5&quot; <br> set connect3 &quot;METAL5 METAL6&quot; <br> set connect4 &quot;METAL6 METAL7&quot; <br> set connect5 &quot;METAL7 METAL8&quot; <br> set connect6 &quot;METAL8 ALPA&quot; <br> connect_two_layer <br> -layers [concat $connect1 ​$connect2 ​$connect3 ​$connect4 ​$connect5 $connect6]</p><ol><li>connect_two_layer <br> -layers [concat $connect1 $connect2]</li><li>connect_two_layer <br> -layers &quot;METAL1 METAL4&quot;<br> connect_two_layer <br> -layers &quot;METAL4 METAL5&quot; <strong>序号1，2的效果是一样的</strong></li></ol><p><strong>PS：被连接的两层需要含有电源线</strong></p><p><strong>#12.connect_io_pin_to_pdn</strong></p><p>将电源NET的IOPIN的Port连接至Core内电源线。(会对Port的坐标进行检查)</p><ul><li>-point_list 连接关系所经过的拐角处的坐标点（起点和终点的坐标也需要有），也可以只输入起点和终点坐标</li><li>-layer 想要进行连线的层</li></ul><p><strong>##示例：</strong><br> connect_io_pin_to_pdn <br> -point_list &quot;998 2802 915 2598&quot; <br> -layer METAL1</p><p><strong>#13.connect_pdn_stripe</strong></p><ul><li>-point_list 连接关系所经过的拐角处的坐标点（起点和终点的坐标也需要有）</li><li>-net_name 想要连接到的电源网络的名称</li><li>-layer 想要进行连线的层<br><strong>##示例：</strong><br> connect_pdn_stripe <br> -point_list &quot;2675.606 1998.707 2680.606 1998.707 2680.606 1892.165 2803.686 1892.165&quot; <br> -net_name VDD <br> -layer ALPA</li></ul><p>connect_pdn_stripe <br> -point_list &quot;2675.606 1998.707 2680.606 1998.707&quot; <br> -net_name VDD <br> -layer ALPA <br> -width 100<br> connect_pdn_stripe <br> -point_list &quot;2680.606 1892.165 2803.686 1892.165&quot; <br> -net_name VDD <br> -layer ALPA <br> -width 100</p><p><strong>#14. add_segment_via</strong><br> 给电源线增加通孔</p><ul><li>-net_name 电源线的名称</li><li>-layer 通孔所在层</li><li>-top_layer metal层 top层</li><li>-bottom_layer metal层 bottom层<br> ​- -offset_x 相对于所连接的IOCELL的左下角坐标的偏移量，此处需设置绝对长度，即乘过DBU之后的值<br> ​- -offset_y 相对于所连接的IOCELL的左下角坐标的偏移量，此处需设置绝对长度，即乘过DBU之后的值<br> ​- -width 矩形宽度，相对于所连接的IOCELL的左下角坐标的偏移量，此处需设置绝对长度，即乘过DBU之后的值<br> ​- -height 矩形高度，相对于所连接的IOCELL的左下角坐标的偏移量，此处需设置绝对长度，即乘过DBU之后的值</li></ul><p><strong>##示例：</strong></p><p>add_segment_via <br> -net_name VDD <br> -layer VIA45 <br> -offset_x 9000 <br> -offset_y 71500 <br> -width 58000 <br> -height 58000</p><p>add_segment_via <br> -net_name VDD <br> -layer VIA45 <br> -offset_x 10000 <br> -offset_y 81500 <br> -width 58000 <br> -height 58000</p><p>add_segment_via <br> -net_name VDD <br> -top_layer METAL8 <br> -bottom_layer METAL1 <br> -offset_x 10000 <br> -offset_y 81500 <br> -width 58000 <br> -height 58000</p><p>add_segment_via <br> -net_name VDDIO <br> -top_layer METAL8 <br> -bottom_layer METAL1 <br> -offset_x 10000 <br> -offset_y 81500 <br> -width 58000 <br> -height 58000</p><p><strong>#15.add_segment_stripe</strong></p><ul><li>-point_list 生成stripe的连接点，当连接点个数大于2时，前后两个连接点两两生成stripe，</li><li>-net_name 想要连接到的电源网络的名称</li><li>-layer 想要进行连线的层</li><li>-width 指定线宽<br> add_segment_stripe <br> -point_list &quot;2680.606 1892.165 2803.686 1892.165&quot; <br> -net_name VDDIO <br> -layer ALPA <br> -width 100</li></ul><p>add_segment_stripe <br> -point_list &quot;1680.606 2892.165 2803.686 2892.165 2803.686 1792.165&quot; <br> -net_name VDDIO <br> -layer ALPA <br> -width 100</p><p>add_segment_stripe <br> -point_begin &quot;3680.606 2892.165&quot; <br> -layer_start METAL4 <br> -point_end &quot;4680.606 2892.165&quot; <br> -layer_end METAL8 <br> -net_name VDDIO <br> -via_width 100 <br> -via_height 200</p><p><strong>#16. read_lef</strong></p><p>读入lef文件，以字符串列表的形式读入</p><p><strong>##示例：</strong></p><p>read_lef &quot;../../Designs/scc011u_8lm_1tm_thin_ALPA/scc011u_8lm_1tm_thin_ALPA.lef <br> ../../Designs/scc011u_8lm_1tm_thin_ALPA/scc011ums_hd_lvt.lef <br> ../../Designs/scc011u_8lm_1tm_thin_ALPA/S013PLLFN_8m_V1_2_1.lef <br> ../../Designs/scc011u_8lm_1tm_thin_ALPA/SP013D3WP_V1p7_8MT.lef <br> ../../Designs/scc011u_8lm_1tm_thin_ALPA/S011HD1P256X32M2B0.lef <br> ../../Designs/scc011u_8lm_1tm_thin_ALPA/S011HD1P512X58M2B0.lef <br> ../../Designs/scc011u_8lm_1tm_thin_ALPA/S011HD1P1024X64M4B0.lef <br> ../../Designs/scc011u_8lm_1tm_thin_ALPA/S011HD1P256X8M4B0.lef <br> ../../Designs/scc011u_8lm_1tm_thin_ALPA/S011HD1P512X73M2B0.lef <br> ../../Designs/scc011u_8lm_1tm_thin_ALPA/S011HD1P128X21M2B0.lef <br> ../../Designs/scc011u_8lm_1tm_thin_ALPA/S011HD1P512X19M4B0.lef <br> ../../Designs/scc011u_8lm_1tm_thin_ALPA/S011HDSP4096X64M8B0.lef &quot;</p><p><strong>#17.read_def</strong></p><p>读入def文件，以字符串的形式读入</p><p><strong>##示例：</strong></p><p>read_def &quot;./asic_top.def&quot;;</p><p><strong>#18.write_def</strong></p><p>写出def文件。参数为写出的文件路径。</p><p><strong>##示例：</strong></p><p>​ write_def &quot;iEDA_FP.def&quot;</p><p>​</p><p>​</p><p>使用要点</p><p>#1.建议在所有pdn操作之前插入tapcell</p><p>#2.建议按照手册的顺序执行命令</p>",52);function _(s,a){return n(),r("div",null,[p,i(" ![image-20211028162925571](pic/image-20211028162925571.png) "),o])}const g=e(l,[["render",_],["__file","ifp.html.vue"]]);export{g as default};
