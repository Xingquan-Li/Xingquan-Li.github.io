const e=JSON.parse('{"key":"v-2166501a","path":"/en/train/eda/algorithm-data/Part_7_algorithm/7_1_geometry/%E6%89%AB%E6%8F%8F%E7%BA%BF%20(sweep%20line)%E7%AE%97%E6%B3%95.html","title":"7.1.3 扫描线下","lang":"en-US","frontmatter":{"title":"7.1.3 扫描线下","order":3},"headers":[{"level":3,"title":"扫描线 (sweep line)算法","slug":"扫描线-sweep-line-算法","link":"#扫描线-sweep-line-算法","children":[]},{"level":3,"title":"时间复杂度","slug":"时间复杂度","link":"#时间复杂度","children":[]},{"level":3,"title":"单调栈","slug":"单调栈","link":"#单调栈","children":[]},{"level":3,"title":"扫描线算法","slug":"扫描线算法","link":"#扫描线算法","children":[]},{"level":3,"title":"代码","slug":"代码","link":"#代码","children":[]},{"level":3,"title":"时间复杂度","slug":"时间复杂度-1","link":"#时间复杂度-1","children":[]}],"git":{"createdTime":1723131714000,"updatedTime":1723131714000,"contributors":[{"name":"Xingquan-Li","email":"fzulxq@gmail.com","commits":1}]},"readingTime":{"minutes":5.86,"words":1758},"filePathRelative":"en/train/eda/algorithm-data/Part_7_algorithm/7_1_geometry/扫描线 (sweep line)算法.md","localizedDate":"August 8, 2024","excerpt":"<h3> 扫描线 (sweep line)算法</h3>\\n<p>设置一条水平扫描线，从上向下依次扫过每个顶点。对于每个点，按照其类型进行操作。对于开始点，结束点和普通点，维护小多边形的边界信息。对于分裂点，连接内对角线并且分裂多边形。<br>\\n合并点也是同样如此，只不过是从下往上重新做一次。</p>\\n<p>需要的数据结构：由于我们需要查找和维护每个小多边形当前的边界，所以使用二分搜索树。</p>\\n<p>具体来说：对于第一次从上往下的扫描到的每个点，我们要做的是：</p>\\n<ol>\\n<li>开始点：说明一个新的小多边形开始了，将其左右边界加入树。</li>\\n<li>结束点：说明一个小多边形结束了，找到结束点左右边界，从树中删除。</li>\\n<li>分裂点：从树中找到这个点所在多边形的左右边界和点上方最近的一个点，连接内对角线，加入两个新多边形的信息，删除旧的大多边形。</li>\\n<li>合并点：在这一次我们不连对角线(第二次从下到上的扫描才连)，仅仅需要合并两个小多边形的边界信息成大多边形，并且加入树。</li>\\n<li>普通点：维护当前多边形的边界信息。</li>\\n</ol>","copyright":{"author":"iEDA","license":"GPL-3.0"}}');export{e as data};
