import{_ as n,a as s}from"./sweep_line_2-aba441f2.js";import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as p,c as t,f as o}from"./app-1ed3f6c2.js";const c={},e=o('<h3 id="扫描线-sweep-line-算法" tabindex="-1"><a class="header-anchor" href="#扫描线-sweep-line-算法" aria-hidden="true">#</a> 扫描线 (sweep line)算法</h3><p>设置一条水平扫描线，从上向下依次扫过每个顶点。对于每个点，按照其类型进行操作。对于开始点，结束点和普通点，维护小多边形的边界信息。对于分裂点，连接内对角线并且分裂多边形。<br> 合并点也是同样如此，只不过是从下往上重新做一次。</p><p>需要的数据结构：由于我们需要查找和维护每个小多边形当前的边界，所以使用二分搜索树。</p><p>具体来说：对于第一次从上往下的扫描到的每个点，我们要做的是：</p><ol><li>开始点：说明一个新的小多边形开始了，将其左右边界加入树。</li><li>结束点：说明一个小多边形结束了，找到结束点左右边界，从树中删除。</li><li>分裂点：从树中找到这个点所在多边形的左右边界和点上方最近的一个点，连接内对角线，加入两个新多边形的信息，删除旧的大多边形。</li><li>合并点：在这一次我们不连对角线(第二次从下到上的扫描才连)，仅仅需要合并两个小多边形的边界信息成大多边形，并且加入树。</li><li>普通点：维护当前多边形的边界信息。</li></ol><p>该算法较为复杂，信息量较多，可以结合下图扫描的过程手动模拟帮助理解。</p><div style="text-align:center;"><img src="'+n+'" alt="ASIC Flow" width="200"><h4>图1 扫描线算法</h4></div><h3 id="时间复杂度" tabindex="-1"><a class="header-anchor" href="#时间复杂度" aria-hidden="true">#</a> 时间复杂度</h3><p>排序 <img src="https://math.jianshu.com/math?formula=O(nlogn)" alt="O(nlogn)"> ，扫描的过程中对每个点都需要查找和维护二叉平衡树，每次耗费 <img src="https://math.jianshu.com/math?formula=O(logn)" alt="O(logn)"> ， 一共 <img src="https://math.jianshu.com/math?formula=n" alt="n"> 个点。所以总复杂度 <img src="https://math.jianshu.com/math?formula=O(nlogn)" alt="O(nlogn)"> 。</p><h5 id="三角剖分单调多边形-triangulating-monotone-polygons" tabindex="-1"><a class="header-anchor" href="#三角剖分单调多边形-triangulating-monotone-polygons" aria-hidden="true">#</a> 三角剖分单调多边形 (Triangulating Monotone Polygons)</h5><p>由于单调多边形具有良好的性质，我们可以从贪心的想法出发，沿着多边形的左右边界逐步向下扫描，遇到一个顶点时进行操作。</p><h3 id="单调栈" tabindex="-1"><a class="header-anchor" href="#单调栈" aria-hidden="true">#</a> 单调栈</h3><p>可以考虑什么情况下，当扫描到一个点时能剖分出一个三角形，什么时候不能。举个例子：</p><div style="text-align:center;"><img src="'+s+`" alt="ASIC Flow" width="200"><h4>图2 三角剖分多边形</h4></div><p>情况1</p><p>当扫描到点 时，与前面的点为异侧时，可以与前面的点依次相连进行三角剖分，直到将异侧点用完。</p><p>情况2</p><p>当扫描到点 时，与前面两个点同侧，并且形成的内角 时，可以与前两个点 相连，剖分出一个三角形，并且剖分后点 失效，如果与前两个形成的内角依然 的话，继续剖分。</p><p>情况3</p><p>当扫描到点 时，当 与前面两个点同侧，并且形成的内角 时，才不能剖分出一个三角形。</p><p>如果学过 <img src="https://math.jianshu.com/math?formula=Graham" alt="Graham"> 扫描法求凸包的话，一定会发现非常相似。于是我们使用一个单调栈保存前面的点的信息，单调栈内的元素满足：</p><ol><li>高度递增：因为我们从上往下扫描，所以栈顶元素一定是最低的。</li><li>在同一侧：如果有异侧元素出现，那么可以不停地向上剖分，直到剩下的都是同侧为止。</li><li>栈内连续的三个元素之间的内角 <img src="https://math.jianshu.com/math?formula=&gt; \\pi" alt="&gt; i"> （单调性）。</li></ol><h3 id="扫描线算法" tabindex="-1"><a class="header-anchor" href="#扫描线算法" aria-hidden="true">#</a> 扫描线算法</h3><p>与上一个扫描线算法类似，从上到下设置一条水平扫描线，一开始先将最高的点加入栈，然后开始向下扫描，每个点按照上面的分类进行操作。</p><p>由于这个算法较为简单，这里不详细描述每个步骤，只给出代码。</p><h3 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><p>以下代码仅供参考和帮助理解算法用，实际上许多 <img src="https://math.jianshu.com/math?formula=corner" alt="corner"> <img src="https://math.jianshu.com/math?formula=case" alt="case"> 如三点共线，或者是两个点纵坐标相同，都没考虑，所以几乎不存在鲁棒性。这个代码仅仅能够在给定单调多边形非常正常的情况下给出正确的对角线。</p><p>输入：<img src="https://math.jianshu.com/math?formula=n" alt="n"> 个点，逆时针给出的多边形坐标： <img src="https://math.jianshu.com/math?formula=p_0%3A(x_0%2Cy_0)%2Cp_1%3A(x_1%2Cy_1)%2C...... %2Cp_{n-1}%3A(x_{n-1}%2C y_{n-1})" alt="p_0:(x_0,y_0),p_1:(x_1,y_1),...... ,p_{n-1}:(x_{n-1}, y_{n-1})"> 。<br> 输出：若干条对角线连接的两个点的编号 <img src="https://math.jianshu.com/math?formula=a%2Cb" alt="a,b">，表示点 <img src="https://math.jianshu.com/math?formula=p_a" alt="p_a"> 和 <img src="https://math.jianshu.com/math?formula=p_b" alt="p_b"> 相连。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">double</span> db<span class="token punctuation">;</span>
<span class="token keyword">const</span> db eps <span class="token operator">=</span> <span class="token number">1e-6</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">sign</span><span class="token punctuation">(</span>db k<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&gt;</span> eps<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> <span class="token operator">-</span>eps<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span>db k1<span class="token punctuation">,</span> db k2<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">sign</span><span class="token punctuation">(</span>k1 <span class="token operator">-</span> k2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">struct</span> <span class="token class-name">point</span>
<span class="token punctuation">{</span>
    db x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
    point operator<span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> point <span class="token operator">&amp;</span>k1<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>point<span class="token punctuation">)</span><span class="token punctuation">{</span>k1<span class="token punctuation">.</span>x <span class="token operator">+</span> x<span class="token punctuation">,</span> k1<span class="token punctuation">.</span>y <span class="token operator">+</span> y<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    point operator<span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">const</span> point <span class="token operator">&amp;</span>k1<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>point<span class="token punctuation">)</span><span class="token punctuation">{</span>x <span class="token operator">-</span> k1<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y <span class="token operator">-</span> k1<span class="token punctuation">.</span>y<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    point operator<span class="token operator">*</span><span class="token punctuation">(</span>db k1<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>point<span class="token punctuation">)</span><span class="token punctuation">{</span>x <span class="token operator">*</span> k1<span class="token punctuation">,</span> y <span class="token operator">*</span> k1<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    point operator<span class="token operator">/</span><span class="token punctuation">(</span>db k1<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>point<span class="token punctuation">)</span><span class="token punctuation">{</span>x <span class="token operator">/</span> k1<span class="token punctuation">,</span> y <span class="token operator">/</span> k1<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">int</span> operator<span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> point <span class="token operator">&amp;</span>k1<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">cmp</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> k1<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">cmp</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> k1<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    bool operator<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> point k1<span class="token punctuation">)</span> <span class="token keyword">const</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token function">cmp</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> k1<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            <span class="token keyword">return</span> <span class="token function">cmp</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> k1<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
db <span class="token function">cross</span><span class="token punctuation">(</span>point k1<span class="token punctuation">,</span> point k2<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> k1<span class="token punctuation">.</span>x <span class="token operator">*</span> k2<span class="token punctuation">.</span>y <span class="token operator">-</span> k1<span class="token punctuation">.</span>y <span class="token operator">*</span> k2<span class="token punctuation">.</span>x<span class="token punctuation">;</span> <span class="token punctuation">}</span>
db <span class="token function">dot</span><span class="token punctuation">(</span>point k1<span class="token punctuation">,</span> point k2<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> k1<span class="token punctuation">.</span>x <span class="token operator">*</span> k2<span class="token punctuation">.</span>x <span class="token operator">+</span> k1<span class="token punctuation">.</span>y <span class="token operator">*</span> k2<span class="token punctuation">.</span>y<span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token comment">//--------------------------------------------------------</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> side<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> <span class="token function">TriangulateMonotonePolygon</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span>point<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> v<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> ans<span class="token punctuation">;</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> vv <span class="token operator">=</span> v<span class="token punctuation">;</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>vv<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vv<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>vv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vv<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">)</span>
        side<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//* left: 0  right: 1</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>vv<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">)</span>
        side<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    stack<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span>point<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> st<span class="token punctuation">;</span>
    st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> sd <span class="token operator">=</span> side<span class="token punctuation">[</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>side<span class="token punctuation">[</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">]</span> <span class="token operator">==</span> side<span class="token punctuation">[</span>st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>second<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//same side</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">2</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">auto</span> top <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">auto</span> top2 <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>sd <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">sign</span><span class="token punctuation">(</span><span class="token function">cross</span><span class="token punctuation">(</span>top<span class="token punctuation">.</span>first <span class="token operator">-</span> top2<span class="token punctuation">.</span>first<span class="token punctuation">,</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">-</span> top<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span>
                    <span class="token punctuation">(</span>sd <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">sign</span><span class="token punctuation">(</span><span class="token function">cross</span><span class="token punctuation">(</span>top<span class="token punctuation">.</span>first <span class="token operator">-</span> top2<span class="token punctuation">.</span>first<span class="token punctuation">,</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">-</span> top<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>top<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                ans<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">,</span> top2<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">auto</span> top <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                ans<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">,</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>
                st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>top<span class="token punctuation">)</span><span class="token punctuation">;</span>
            st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> cnt <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> now <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">==</span> cnt <span class="token operator">||</span> now <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        ans<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">,</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>
        st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span>point<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> input<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>
    input<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        cin <span class="token operator">&gt;&gt;</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">.</span>x <span class="token operator">&gt;&gt;</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">.</span>y<span class="token punctuation">,</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token keyword">auto</span> ans <span class="token operator">=</span> <span class="token function">TriangulateMonotonePolygon</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;diagonal id:&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> x <span class="token operator">:</span> ans<span class="token punctuation">)</span>
        cout <span class="token operator">&lt;&lt;</span> x<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span> <span class="token operator">&lt;&lt;</span> x<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="时间复杂度-1" tabindex="-1"><a class="header-anchor" href="#时间复杂度-1" aria-hidden="true">#</a> 时间复杂度</h3><p>排序 <img src="https://math.jianshu.com/math?formula=O(nlogn)" alt="O(nlogn)"> 。单调栈由于每个点只会入栈出栈一次，均摊 <img src="https://math.jianshu.com/math?formula=O(1)" alt="O(1)">，有 <img src="https://math.jianshu.com/math?formula=n" alt="n"> 个点，所以 <img src="https://math.jianshu.com/math?formula=O(n)" alt="O(n)"> 。 总复杂度 <img src="https://math.jianshu.com/math?formula=O(nlogn)" alt="O(nlogn)">。<br> 实际上，如果给定的单调多边形已经排好序，并且标好左右边界的标记，可以把排序的复杂度去掉，这一部分的总复杂度就变为 <img src="https://math.jianshu.com/math?formula=O(n)" alt="O(n)">。而这一步可以在单调多边形分解时做到。</p>`,31),u=[e];function l(i,k){return p(),t("div",null,u)}const v=a(c,[["render",l],["__file","扫描线 (sweep line)算法.html.vue"]]);export{v as default};
