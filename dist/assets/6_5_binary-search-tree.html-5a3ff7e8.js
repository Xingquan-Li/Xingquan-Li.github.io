const t=JSON.parse('{"key":"v-43bb00e7","path":"/train/eda/algorithm-data/Part_6-data_structure/6_5_binary-search-tree.html","title":"6.5 二叉查找树","lang":"zh-CN","frontmatter":{"title":"6.5 二叉查找树","order":5},"headers":[],"git":{"createdTime":1721213548000,"updatedTime":1721213548000,"contributors":[{"name":"Xingquan-Li","email":"fzulxq@gmail.com","commits":1}]},"readingTime":{"minutes":11.6,"words":3481},"filePathRelative":"train/eda/algorithm-data/Part_6-data_structure/6_5_binary-search-tree.md","localizedDate":"2024年7月17日","excerpt":"<p><strong>一、二叉查找树</strong></p>\\n<p>**1、定义：**二叉查找树，也称二叉搜索树，或二叉排序树。其定义也比较简单，要么是一颗空树，要么就是具有如下性质的二叉树。</p>\\n<p><strong>2、性质：</strong></p>\\n<p>（1） 若任意节点的左子树不空，则左子树上所有结点的值均小于它的根结点的值；</p>\\n<p>（2） 若任意节点的右子树不空，则右子树上所有结点的值均大于它的根结点的值；</p>\\n<p>（3） 任意节点的左、右子树也分别为二叉查找树；</p>\\n<p>（4） 没有键值相等的节点。</p>\\n<p>（5） 对二叉查找树进行中序遍历，即可得到有序的数列。</p>","copyright":{"author":"iEDA","license":"GPL-3.0"}}');export{t as data};
