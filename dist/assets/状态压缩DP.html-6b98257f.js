import{_ as t}from"./dp_21-c80ad2b6.js";import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,d as s,e as n,a as i,f as a}from"./app-1ed3f6c2.js";const u={},k=a(`<h3 id="预备知识" tabindex="-1"><a class="header-anchor" href="#预备知识" aria-hidden="true">#</a> 预备知识</h3><h4 id="位运算" tabindex="-1"><a class="header-anchor" href="#位运算" aria-hidden="true">#</a> 位运算</h4><p>常用的运算符共 6 种，分别为与（ &amp; ）、或（ | ）、异或（ ^ ）、取反（ ~ ）、左移（ &lt;&lt; ）和右移（ &gt;&gt; ）</p><ol><li>’&amp;’符号，x&amp;y，会将两个十进制数在二进制下进行与运算(都1为1，其余为0） 然后返回其十进制下的值。例如3(11)&amp;2(10)=2(10)。</li><li>’|’符号，x|y，会将两个十进制数在二进制下进行或运算（都0为0，其余为1） 然后返回其十进制下的值。例如3(11)|2(10)=3(11)。</li><li>’ ^ ’符号，x^y，会将两个十进制数在二进制下进行异或运算（不同为1，其余 为0）然后返回其十进制下的值。例如3(11)^2(10)=1(01)。</li><li>’ ~ ’符号， ~ x，按位取反。例如~101=010。</li><li>’&lt;&lt;’符号，左移操作，x&lt;&lt;2，将x在二进制下的每一位向左移动两位，最右边用0填充，x&lt;&lt;2相当于让x乘以4。</li><li>’&gt;&gt;’符号，是右移操作，x&gt;&gt;1，将x在二进制下的每一位向右移动两位，最左边用0填充，相当于给x/2，去掉x二进制下的最右一位。</li></ol><h4 id="常见的一些位运算" tabindex="-1"><a class="header-anchor" href="#常见的一些位运算" aria-hidden="true">#</a> 常见的一些位运算</h4><p>1.判断一个数字x二进制下第i位是不是等于1。</p><div class="language-undefined line-numbers-mode" data-ext="undefined"><pre class="language-undefined"><code>if( ( (1&lt;&lt;(i−1)) &amp; x ) &gt; 0 )
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>原理:1左移i - 1位 成为 0000010000（其中i位第i位） 通过与运算从而得知第i位是否为1</p><p>2.将一个数字x二进制下第i位更改成1。</p><div class="language-undefined line-numbers-mode" data-ext="undefined"><pre class="language-undefined"><code>x = ( 1&lt;&lt;( i - 1 ) | x 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>原理:1左移i - 1位 成为 0000010000（其中i位第i位） 通过或运算从而得知第i位是否为1</p><p>3.将一个数字x二进制下第i位更改成0。</p><div class="language-undefined line-numbers-mode" data-ext="undefined"><pre class="language-undefined"><code>x = x &amp; ~(1 &lt;&lt; ( i − 1 ) )
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>原理:通过对(1 &lt;&lt; ( i − 1 ) )进行取反 得到 1111101111(0 为第i位) 再进行与运算得到第i位为1的数字</p><p>4.把一个数字二进制下最靠右的第一个1去掉。</p><div class="language-undefined line-numbers-mode" data-ext="undefined"><pre class="language-undefined"><code>x = x &amp; ( x− 1 )
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>原理:假设数字x为11111(2) 则x - 1 为 11110(2) 与运算则会把最后一位1去掉, 得到数字11110<br> 若数字x为11100(2) 则x - 1为11011(2) 与运算得到 11000<br> 很显然对于一串二进制数 其最后一位可分为0/1两种情况,而一个数字可以分为两个前后部分: 不变的部分+变的部分<br> 例如: x = 110111(2) 可分为: 110 111两部分 x - 1 则为 110 110<br>    x = 110100(2) 可分为: 110 100两部分 x - 1 则为 110 011<br> 后面变的部分通过与运算实现实现去掉靠右的第一个1</p><p>注:这里的分法并无什么要求, 110111(2) 分为 1101 11两部分也可. 所谓的分成两部分也只是为了便于理解为什么这样子可以去掉靠右的第一个1,有其他的理解方法亦可</p><p>这里只摘要了一些常见的位运算,感兴趣可自行查询其他运算</p><h3 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h3><p>状压DP是利用计算机二进制的性质来描述状态的一种DP方式。状压经常和BFS及DP连用。</p><p>使用二进制数枚举出每一种可能的状态,通过不同状态的转移从而得到最优解</p><p>可以看得出使用二进制数描述状态很容易让状态数成指数态势增长,时间复杂度很容易升高,优化可以通过条件优化不同状态之间的转移关系,从而降低复杂度</p><p>例题讲解:</p><div class="language-undefined line-numbers-mode" data-ext="undefined"><pre class="language-undefined"><code>骑士(P1896 [SCOI2005]互不侵犯)
题目描述
在N×N的棋盘里面放K个国王，使他们互不攻击，共有多少种摆放方案。国王能攻击到它上下左右，以及左上左下右上右下八个方向上附近的各一个格子，共8个格子。

输入格式
只有一行，包含两个数N，K （ 1 &lt;=N &lt;=9, 0 &lt;= K &lt;= N * N）

输出格式
所得的方案数

输入输出样例
输入 
3 2
输出 
16
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解析:状压DP是利用计算机二进制的性质来描述状态的一种DP方式,在本题中用一串二进制数来描述一行的状态<br> 例如在一个4行4列的格子中第二行的状态是1001 代表第二行的第一,第四个放了分别放了一个国王</p><p>我们怎么用DP的思维来思考这道题呢?<br> 我们很清楚DP的特征是将一个大问题分解为若干个相似的子问题,并且问题的解决无后效性,也就是说这个子问题的决策之后不会再后续的问题决策产生影响,本题的特征是八个方向不能有1(1代表有国王) 我们可以通过每一行的方式来思考, 待解决的这一行的状态是由上一行的状态所决定的!<br> 联系之前说的使用一串二进制数代表一行的状态,我们可以列出一行可以有多少种状态, 然后再找到多少对状态是可以上下堆叠的<br> 举个例子:<br> 我们前进的方向有四种:上下左右(这就是每一行的状态)<br> 对于我们走的方向又有一定的规则:<br> 向上走之后不能向下/右走(不同状态的堆叠)<br> 这样子是不是很有些熟悉的感觉?和一道入门的DP很相似</p><div style="text-align:center;"><img src="`+t+'" alt="ASIC Flow" width="200"><h4>图1 机器人寻路</h4></div>',28),r={href:"https://links.jianshu.com/go?to=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Funique-paths-ii%2F",target:"_blank",rel:"noopener noreferrer"},d=s("br",null,null,-1),v=s("br",null,null,-1),m=a(`<p>题中要求一个国王的八个方向都不能有另一个国王,则利用了上述的位运算分别是<br> x &amp; (x &lt;&lt; 1)左右方向无国王(求出一行具有的全部状态)<br> x &amp; y 上下方向无国王 (判断上一行与这一行的上下方向)<br> x &amp; (y&lt;&lt;1) 东南/东北方向无国王(判断上一行与这一行的东南/东北方向)<br> x &amp; (y&gt;&gt;1) 西南.西北方向无国王(判断上一行与这一行的西南.西北方向)</p><p>下面给出状态方程:</p><div class="language-undefined line-numbers-mode" data-ext="undefined"><pre class="language-undefined"><code>dp[i][j][k] = dp[i - 1][t][k - total[j]]
i代表1 - i 行
j代表第几种状态
k代表使用了多少个国王
total代表每种状态放置了多少个国王
dp[i][j][k] 的含义就是 1 - i 行的棋盘, 其中第i行的状态为第j种状态,使用了k个国王的种数
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完成本题需要以下要求</p><ol><li>记录有多少种状态</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> kinds<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li>记录每种状态含有多少个国王</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> total<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3.dp</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">&gt;</span> <span class="token operator">&gt;</span> <span class="token operator">&gt;</span>dp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>记录状态并判断记录每种状态含有多少个国王--使用了预备知识的位运算</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//cout &lt;&lt; (i &lt;&lt; 1)&lt;&lt;endl;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//判断该二进制是否符合状态要求--是否左右含有国王</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            kind <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//该二进制数含有1的个数</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    kind<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            kinds<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            total<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>kind<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>dp</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">//init</span>
<span class="token comment">//初始化第一行的状态</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> kinds<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>total<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//dp[0][1][0] = dp[0][1][0] = 1;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//行</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> kinds<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//每行的可能状态</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> K <span class="token operator">=</span> total<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> K <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> K<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>判断所求的k需要大于本行国王数目才能进行下列运算
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> t <span class="token operator">&lt;</span> kinds<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> t<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//前一行的可能状态</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>kinds<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;</span> kinds<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>kinds<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">&amp;</span> kinds<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>kinds<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">&amp;</span> kinds<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>K<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>K <span class="token operator">-</span> total<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>优化思路:</p><p>可以建立不同状态之间的转移关系的状态图,来简化时间复杂度,例如第四个循环可以通过状态图优化不需要遍历所有状态</p><p>完整代码:</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> kind <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> kinds<span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> total<span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> k<span class="token punctuation">;</span>
    <span class="token comment">//init</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//cout &lt;&lt; (i &lt;&lt; 1)&lt;&lt;endl;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            kind <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    kind<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            kinds<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            total<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>kind<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//init var</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">&gt;</span> <span class="token function">arr</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">&gt;</span> <span class="token operator">&gt;</span><span class="token function">temp</span><span class="token punctuation">(</span>kinds<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">&gt;</span> <span class="token operator">&gt;</span> <span class="token operator">&gt;</span> <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//dp</span>
    <span class="token comment">//init dp</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> kinds<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>total<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//dp[0][1][0] = dp[0][1][0] = 1;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> kinds<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> K <span class="token operator">=</span> total<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> K <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> K<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> t <span class="token operator">&lt;</span> kinds<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> t<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>kinds<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;</span> kinds<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>kinds<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">&amp;</span> kinds<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>kinds<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">&amp;</span> kinds<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>K<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>K <span class="token operator">-</span> total<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> kinds<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res <span class="token operator">+=</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> res<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18);function b(g,f){const p=o("ExternalLinkIcon");return c(),l("div",null,[k,s("p",null,[n("题目链接:"),s("a",r,[n("https://leetcode-cn.com/problems/unique-paths-ii/"),i(p)]),d,n(" 机器人的方向只能向右/下 只是走完其中一步之后还能继续走的方向是随机的(因为障碍物是随机的)"),v,n(" 那么这题就很简单了")]),m])}const x=e(u,[["render",b],["__file","状态压缩DP.html.vue"]]);export{x as default};
