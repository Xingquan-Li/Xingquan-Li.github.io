const e=JSON.parse('{"key":"v-cef3894e","path":"/train/eda/algorithm-data/Part_7_algorithm/7_4_graph/7_4_11_%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%E4%B8%8EKosaraju%E7%AE%97%E6%B3%95.html","title":"7.4.11 强连通分量和Kosaraju算法","lang":"zh-CN","frontmatter":{"title":"7.4.11 强连通分量和Kosaraju算法","order":11},"headers":[{"level":3,"title":"1.强连通的定义","slug":"_1-强连通的定义","link":"#_1-强连通的定义","children":[]},{"level":3,"title":"2.强连通分量","slug":"_2-强连通分量","link":"#_2-强连通分量","children":[]},{"level":3,"title":"3.Kosaraju算法","slug":"_3-kosaraju算法","link":"#_3-kosaraju算法","children":[]}],"git":{"createdTime":1721900327000,"updatedTime":1721900327000,"contributors":[{"name":"simintao","email":"simintao@126.com","commits":1}]},"readingTime":{"minutes":6.94,"words":2081},"filePathRelative":"train/eda/algorithm-data/Part_7_algorithm/7_4_graph/7_4_11_拓扑排序与Kosaraju算法.md","localizedDate":"2024年7月25日","excerpt":"<h3> 1.强连通的定义</h3>\\n<p>回想一下我们在无向图的时候，当时我们就利用深度优先搜索解决了一幅无向图的连通问题。根据深搜能够到达所有连通的顶点，我们很容易解决这个问题。但是，问题变成有向图，就没有那么简单了！下面分别是无向图和有向图的两个例子：</p>\\n<div style=\\"text-align:center;\\">\\n  <img src=\\"/res/images/eda_algorithm/graph/graph_27.png\\" alt=\\"ASIC Flow\\" width=\\"200\\">\\n  <h4>图1 强连通</h4>\\n</div>\\n<p>无向图的各连通分量</p>\\n<blockquote>\\n<p>定义。如果两个顶点<code>v</code>和<code>w</code>是互相可达的，则称它们为强连通的。也就是说，既存在一条从<code>v</code>到<code>w</code>的有向路径，也存在一条从<code>w</code>到<code>v</code>的有向路径。如果一幅有向图中的任意两个顶点都是强<br>\\n连通的，则称这幅有向图也是强连通的。</p>\\n</blockquote>","copyright":{"author":"iEDA","license":"GPL-3.0"}}');export{e as data};
