import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as a,f as r}from"./app-1ed3f6c2.js";const d={},n=r('<h2 id="一、概述" tabindex="-1"><a class="header-anchor" href="#一、概述" aria-hidden="true">#</a> 一、概述</h2><p>当前iCTS支持在给定约束下进行时钟树构建，目前iCTS以DME和Slew-Aware为基本框架，融合多类约束进行时钟树设计，由于DME的自底向上过程中无法获取上游Slew信息，<br> 在下游的链式传播将带来较大误差，iCTS在引入时序后向传播方法，在缓冲插入阶段进行线网级别的时序传播，矫正线网负载单元的插入时延。<br> iCTS采用较为准确的时序模型进行时序信息的估算与传播，以最小设计成本为目标进行时钟树构建。</p><h3 id="约束" tabindex="-1"><a class="header-anchor" href="#约束" aria-hidden="true">#</a> 约束</h3><p>iCTS可支持约束如下表所示，其中约束名称与Config参数名称对应</p><table><thead><tr><th style="text-align:center;">约束名称</th><th style="text-align:center;">约束等级</th></tr></thead><tbody><tr><td style="text-align:center;">skew_bound</td><td style="text-align:center;">Hard</td></tr><tr><td style="text-align:center;">max_buf_tran</td><td style="text-align:center;">Hard</td></tr><tr><td style="text-align:center;">max_sink_tran</td><td style="text-align:center;">Hard</td></tr><tr><td style="text-align:center;">max_cap</td><td style="text-align:center;">Soft</td></tr><tr><td style="text-align:center;">max_fanout</td><td style="text-align:center;">Hard</td></tr><tr><td style="text-align:center;">max_length</td><td style="text-align:center;">Soft</td></tr></tbody></table><h3 id="时序模型" tabindex="-1"><a class="header-anchor" href="#时序模型" aria-hidden="true">#</a> 时序模型</h3><p>iCTS目前采用PERI互连线模型作为互连线的slew计算方法，采用Elmore模型作为互连线时延计算方法，对于缓冲器的插入时延采用查表法（Lut），其中包含部分方法的扩展，具体如下表所示。</p><table><thead><tr><th style="text-align:center;">模型</th><th style="text-align:center;">场景</th><th style="text-align:center;">扩展</th></tr></thead><tbody><tr><td style="text-align:center;">PERI</td><td style="text-align:center;">互连线slew的计算与传播</td><td style="text-align:center;">公式计算、时序后向传播矫正</td></tr><tr><td style="text-align:center;">Elmore</td><td style="text-align:center;">互连线时延计算</td><td style="text-align:center;">公式计算</td></tr><tr><td style="text-align:center;">Unit RC</td><td style="text-align:center;">根据单位电容电阻换算互连线的负载电容电阻</td><td style="text-align:center;">公式计算</td></tr><tr><td style="text-align:center;">Lut</td><td style="text-align:center;">缓冲器插入时延计算与单元slew传播</td><td style="text-align:center;">双线性插值法、多元线性拟合模型、机器学习模型</td></tr></tbody></table><h3 id="目标" tabindex="-1"><a class="header-anchor" href="#目标" aria-hidden="true">#</a> 目标</h3><p>iCTS在尽可能满足设计约束的前提下，对于存在多种缓冲方案的情景将采用最小化设计成本的方案进行时钟树设计，目前采用的度量方法如下：</p><ul><li>优先选取满足时序约束下尺寸较小的缓冲方案</li><li>对于连续缓冲插入以平衡时钟偏差（skew）的情况，为简化时序计算与传播的复杂性，考虑采用同种缓冲器并以均匀线长为间距进行时序平衡，该阶段优先考虑最小化单元面积增加的缓冲方案</li></ul><h2 id="二、多时钟平衡" tabindex="-1"><a class="header-anchor" href="#二、多时钟平衡" aria-hidden="true">#</a> 二、多时钟平衡</h2><p>iCTS可支持多时钟设计，首先对各个时钟逐一构建时钟树形成基本的时钟树结果，通过iSTA的时序评估分析顶层节点的时钟偏差，最终根据设计需要进行时序平衡。</p><h2 id="三、支持扩展" tabindex="-1"><a class="header-anchor" href="#三、支持扩展" aria-hidden="true">#</a> 三、支持扩展</h2><h3 id="多缓冲器类型" tabindex="-1"><a class="header-anchor" href="#多缓冲器类型" aria-hidden="true">#</a> 多缓冲器类型</h3><p>iCTS支持基于多缓冲器类型（目前不包括反相器）进行时钟树设计，并在缓冲插入过程中采用<a href="#%E7%9B%AE%E6%A0%87">目标</a>中的策略进行缓冲器选取，该特性可在Config中的<code>buffer_type</code>参数进行设定。</p><h3 id="聚类降低规模" tabindex="-1"><a class="header-anchor" href="#聚类降低规模" aria-hidden="true">#</a> 聚类降低规模</h3><p>iCTS支持使用聚类方法（K-Means）降低大规模线网的运行时间，对于寄存器数量超过3000的线网，iCTS将自动执行K-Means算法划分为50个之类分别进行局部时钟树构建，在完成局部构建后进行顶层的时钟树合并，局部构建和顶层时钟树构建均采用相同的时钟树算法。</p><p>在K-Means聚类过程中，我们设定了初始迭代次数，在每次迭代过程中，我们记录每一簇的寄存器负载电容总和，并考虑较小簇间电容方差的聚类结果进行时钟树构建。</p><h3 id="机器学习模型" tabindex="-1"><a class="header-anchor" href="#机器学习模型" aria-hidden="true">#</a> 机器学习模型</h3><p>iCTS基于Cython支持Python模型、方法的调用。目前封装Linear、XGBoost、CatBoost模型和Matplotlib的基本绘图方法可供使用，可指定编译选项<code>SYS_PYTHON3_VERSION</code>指定系统Python版本，<br> 并打开<code>PY_MODEL</code>选项即可实现C++与Python交互，在该模式下，时序有关Lut过程将使用机器学习模型进行。</p>',21),i=[n];function l(h,s){return e(),a("div",null,i)}const x=t(d,[["render",l],["__file","icts.html.vue"]]);export{x as default};
